[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"BioSeqUtils package supply useful functions things efficiently \ngenerated work process. collect package share . question suggestion, please leave word github issues. Maybe package looks like\nfunctions hodgepodge, anyway least makes better aspects.Citation: Jun Zhang (2023). BioSeqUtils: Extract Sequence Genome According Annotation File. https://github.com/junjunlab/BioSeqUtilsYou can install development version BioSeqUtils like :","code":"\n# install.packages(\"devtools\")\ndevtools::install_github(\"junjunlab/BioSeqUtils\")\nlibrary(BioSeqUtils)"},{"path":"index.html","id":"related-blogs","chapter":"1 About","heading":"1.1 Related blogs","text":"updates information shown official channel:基因特征序列提取 R 包 BioSeqUtilsAbout BioSeqUtilsBioSeqUtils 还能再快一点?工作中自己有用的小函数手把手教你绘制染色体结构图染色体绘制之温故而知新","code":""},{"path":"extract-sequence.html","id":"extract-sequence","chapter":"2 Extract sequence","heading":"2 Extract sequence","text":"main reason package name BioSeqUtils write utilities\nextract multiple feature sequences annotation file, like transcript,\nUTR, CDS. Also ’s experience practice R language. following\nexamples show use.","code":""},{"path":"extract-sequence.html","id":"data-loading","chapter":"2 Extract sequence","heading":"2.1 Data loading","text":"First can load gtf genome file local using loadGenomeGTF\nreturn GenomeGTF object:","code":"\n# devtools::install_github(\"junjunlab/BioSeqUtils\")\nlibrary(BioSeqUtils)\n\n# make object\nmytest <- loadGenomeGTF(gtfPath = \"hg38.ncbiRefSeq.gtf.gz\",\n                        genomePath = \"hg38.fa.gz\")\n\n## GenomeGTF object for Extracting sequences.\n## GTF file is loaded.\n## genome file is loaded.\n## representTrans file is NULL.\n## intron slot is NULL."},{"path":"extract-sequence.html","id":"get-features-information","chapter":"2 Extract sequence","heading":"2.2 Get features information","text":"getTransInfo summarize gene’s transcript length information \ndifferent features. selecType controls filtering rule, lcds mode means\nsorting CDS length transcript length select top transcript\ntopN parameter. lt mode means sorting transcript length select\ntop transcript. can get transcript information set topN=0.\nexamles:","code":"\n# all gene\ngene <- unique(mytest@gtf$gene_name)\n\n# get transcript info\nrt <- getTransInfo(object = mytest,geneName = gene,\n                   selecType = \"lcds\",topN = 1)\n\n# check\nhead(rt,3)\n# # A tibble: 3 × 11\n# # Groups:   gene_name, gene_id [3]\n#   gene_name gene_id  transcript_id   exon   CDS `3UTR` `5UTR` gtype cdsst cdsed tname\n#   <chr>     <chr>    <chr>          <dbl> <dbl>  <dbl>  <dbl> <chr> <dbl> <dbl> <chr>\n# 1 A1BG      A1BG     NM_130786.4     3382  1485   1839     55 CD       56  1541 A1BG|A1BG|NM_130786.4|56|1541|3382|CD\n# 2 A1BG-AS1  A1BG-AS1 NR_015380.2     2130     0      0      0 NC        1  2130 A1BG-AS1|A1BG-AS1|NR_015380.2|1|2130|2130|NC\n# 3 A1CF      A1CF     NM_001198819.2  9481  1806   7320    352 CD      353  2159 A1CF|A1CF|NM_001198819.2|353|2159|9481|CD"},{"path":"extract-sequence.html","id":"extract-sequnence","chapter":"2 Extract sequence","heading":"2.3 Extract sequnence","text":"getFeatureFromGenome function can used extract multiple feature sequence\ncan 5UTR, 3UTR, exon, intron. Setting geneSeq=T\nget genomic sequence. .extend dn.extend can extend target\nsequence extract.getFeatureFromGenome works slowly applying thousands sequences. \nwrote python script named pyExtractSeq thing huge\nspeed improvement. can use directly R. following comparison:","code":"\nlongesttrans <- getFeatureFromGenome(mytest,transId = rt$transcript_id[1:10],type = \"exon\")\n\nlongesttrans\n# DNAStringSet object of length 57285:\n#           width seq                                                                names\n#     [1]    3382 ATTGCTGCAGACGCTCACCCCAGACACTCACT...ATTTTGCACACTTTAAAATATTGGGTTGTTT A1BG|A1BG|NM_1307...\n#     [2]    2130 ATTTTTAGTAGAGACGGGGTTTCGTCATGTTG...TGAAATACCTAGTGTGGTTTCTATTTCCTGA A1BG-AS1|A1BG-AS1...\n#     [3]    9481 ATAATCAAGGAAACCTTTTCCGGGTGGGGATC...AGTGCCATTATAAAGTTTTAAAAATTATCAA A1CF|A1CF|NM_0011...\n#     [4]    4953 GGGACCAGATGGATTGTAGGGAGTAGGGTACA...TGATGAATAAACACTTTTTCTGGTCAATGTC A2M|A2M|XM_006719...\n#     [5]    2300 CATCAGCCCAGCCTGCAAGGAGGCGCCACCGG...GCGGCCCTCTCCAATAAATGTGTTTTTCTAT A2M-AS1|A2M-AS1|N...\n#     ...     ... ...\n# [57281]    8143 GGAGTCTGCGCTCTGGTTCGGGCTGCGGCTGC...TTTTTTGCCTAAATAAATGTTATAAATTTTA ZYG11B|ZYG11B|NM_...\n# [57282]     118 GTGTTACAAGTGAGAGGACTGTGGGAAGCCCC...TGAGAACTGCCTTCCTTCTGGACCCACGACC ZYXP1|ZYXP1|ZYXP1...\n# [57283]    9136 AGGAAGCCGGAAGCCGCAGGGGCCGCCGTCGT...AGAGCATGCACGAGCCCCATTTATCAGAGTC ZZEF1|ZZEF1|XM_01...\n# [57284]    6475 ACCTGGAAGCGCCGCGGCGCCGCTATCGAGCT...TGTGCTATATAAAACTATTTCTTATTGTGGA ZZZ3|ZZZ3|NM_0013...\n# [57285]    2206 GATTAGAGCCTCCCACAGGTGCTCCCCAATTT...GCCCAGTAATAAAGTTTTATGATCTTTTAAA bA255A11.4|bA255A...\n\n# output\nBiostrings::writeXStringSet(longesttrans,filepath = \"testlongest.fa\",format = \"fasta\")\n# get exon sequence\nsystem.time(longesttrans <- getFeatureFromGenome(mytest,\n                                                 transId = rt2$transcript_id[1:5000],\n                                                 type = \"exon\"))\n# getFeatureFromGenome is running [==================================] 100% in  5m\n# 用户   系统   流逝\n# 216.31  10.47 299.44\n\n# using python code\nsystem.time(pyExtractSeq(gtf_file = \"./hg38.ncbiRefSeq.gtf\",\n                         genome_file = \"./hg38.fa\",\n                         transcript_id = rt2$transcript_id[1:5000],\n                         new_id = rt2$tname[1:5000],\n                         type = \"exon\",\n                         out_file = \"output_test.fasta\"))\n# 用户  系统  流逝\n# 5.13  0.83 14.19"},{"path":"extract-sequence.html","id":"get-inrton-information","chapter":"2 Extract sequence","heading":"2.4 Get inrton information","text":"getIntronInfo allows get inrton coordinate information \nsimilar gtf format.","code":"\n# get intron info\ngetIntronInfo(mytest,geneName = \"MYC\")\n\n#   seqnames     start       end width strand                source\n# 1     chr8 127736624 127738247  1624      + ncbiRefSeq.2022-10-28\n# 2     chr8 127739020 127740395  1376      + ncbiRefSeq.2022-10-28\n# 3     chr8 127736624 127738250  1627      + ncbiRefSeq.2022-10-28\n# 4     chr8 127739020 127740395  1376      + ncbiRefSeq.2022-10-28\n#     type score phase gene_id  transcript_id gene_name exon_number\n# 1 intron    NA    NA     MYC    NM_002467.6       MYC           1\n# 2 intron    NA    NA     MYC    NM_002467.6       MYC           2\n# 3 intron    NA    NA     MYC NM_001354870.1       MYC           1\n# 4 intron    NA    NA     MYC NM_001354870.1       MYC           2\n#            exon_id\n# 1    NM_002467.6.1\n# 2    NM_002467.6.2\n# 3 NM_001354870.1.1\n# 4 NM_001354870.1.2\n\n# define transcript_id\ngetIntronInfo(mytest,geneName = \"MYC\",transId = \"NM_002467.6\")\n\n#   seqnames     start       end width strand                source\n# 1     chr8 127736624 127738247  1624      + ncbiRefSeq.2022-10-28\n# 2     chr8 127739020 127740395  1376      + ncbiRefSeq.2022-10-28\n#     type score phase gene_id transcript_id gene_name exon_number\n# 1 intron    NA    NA     MYC   NM_002467.6       MYC           1\n# 2 intron    NA    NA     MYC   NM_002467.6       MYC           2\n#         exon_id\n# 1 NM_002467.6.1\n# 2 NM_002467.6.2\n\n# define geneid\ngetIntronInfo(mytest,geneId = \"MYC\",transId = \"NM_002467.6\")\n\n#   seqnames     start       end width strand                source\n# 1     chr8 127736624 127738247  1624      + ncbiRefSeq.2022-10-28\n# 2     chr8 127739020 127740395  1376      + ncbiRefSeq.2022-10-28\n#     type score phase gene_id transcript_id gene_name exon_number\n# 1 intron    NA    NA     MYC   NM_002467.6       MYC           1\n# 2 intron    NA    NA     MYC   NM_002467.6       MYC           2\n#         exon_id\n# 1 NM_002467.6.1\n# 2 NM_002467.6.2\n\n# multiple genes\ngetIntronInfo(mytest,geneName = c(\"MYC\",\"H19\"))\n# getIntronInfo is running [=========================================] 100% in  0s\n#                seqnames     start       end width strand                source   type score phase gene_id  transcript_id\n# 1  chr11_ML143358v1_fix    188317    188397    81      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_002196.2\n# 2  chr11_ML143358v1_fix    188521    188600    80      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_002196.2\n# 3  chr11_ML143358v1_fix    188714    188808    95      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_002196.2\n# 4  chr11_ML143358v1_fix    188944    189039    96      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_002196.2\n# 5  chr11_ML143358v1_fix    188311    188397    87      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_131223.1\n# 6  chr11_ML143358v1_fix    188521    188600    80      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_131223.1\n# 7  chr11_ML143358v1_fix    188714    188808    95      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_131223.1\n# 8  chr11_ML143358v1_fix    188944    189039    96      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_131223.1\n# 9  chr11_ML143358v1_fix    188317    188397    81      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_131224.1\n# 10 chr11_ML143358v1_fix    188521    188600    80      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_131224.1\n# 11 chr11_ML143358v1_fix    188714    188808    95      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_131224.1\n# 12 chr11_ML143358v1_fix    188944    193739  4796      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19    NR_131224.1\n# 13                chr11   1995795   1995875    81      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_002196.2_2\n# 14                chr11   1995999   1996078    80      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_002196.2_2\n# 15                chr11   1996192   1996286    95      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_002196.2_2\n# 16                chr11   1996422   1996517    96      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_002196.2_2\n# 17                chr11   1995789   1995875    87      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_131223.1_2\n# 18                chr11   1995999   1996078    80      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_131223.1_2\n# 19                chr11   1996192   1996286    95      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_131223.1_2\n# 20                chr11   1996422   1996517    96      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_131223.1_2\n# 21                chr11   1995795   1995875    81      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_131224.1_2\n# 22                chr11   1995999   1996078    80      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_131224.1_2\n# 23                chr11   1996192   1996286    95      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_131224.1_2\n# 24                chr11   1996422   2001217  4796      - ncbiRefSeq.2022-10-28 intron    NA    NA     H19  NR_131224.1_2\n# 25                 chr8 127736624 127738247  1624      + ncbiRefSeq.2022-10-28 intron    NA    NA     MYC    NM_002467.6\n# 26                 chr8 127739020 127740395  1376      + ncbiRefSeq.2022-10-28 intron    NA    NA     MYC    NM_002467.6\n# 27                 chr8 127736624 127738250  1627      + ncbiRefSeq.2022-10-28 intron    NA    NA     MYC NM_001354870.1\n# 28                 chr8 127739020 127740395  1376      + ncbiRefSeq.2022-10-28 intron    NA    NA     MYC NM_001354870.1\n#    gene_name exon_number          exon_id\n# 1        H19           4    NR_002196.2.4\n# 2        H19           3    NR_002196.2.3\n# 3        H19           2    NR_002196.2.2\n# 4        H19           1    NR_002196.2.1\n# 5        H19           4    NR_131223.1.4\n# 6        H19           3    NR_131223.1.3\n# 7        H19           2    NR_131223.1.2\n# 8        H19           1    NR_131223.1.1\n# 9        H19           4    NR_131224.1.4\n# 10       H19           3    NR_131224.1.3\n# 11       H19           2    NR_131224.1.2\n# 12       H19           1    NR_131224.1.1\n# 13       H19           4  NR_002196.2_2.4\n# 14       H19           3  NR_002196.2_2.3\n# 15       H19           2  NR_002196.2_2.2\n# 16       H19           1  NR_002196.2_2.1\n# 17       H19           4  NR_131223.1_2.4\n# 18       H19           3  NR_131223.1_2.3\n# 19       H19           2  NR_131223.1_2.2\n# 20       H19           1  NR_131223.1_2.1\n# 21       H19           4  NR_131224.1_2.4\n# 22       H19           3  NR_131224.1_2.3\n# 23       H19           2  NR_131224.1_2.2\n# 24       H19           1  NR_131224.1_2.1\n# 25       MYC           1    NM_002467.6.1\n# 26       MYC           2    NM_002467.6.2\n# 27       MYC           1 NM_001354870.1.1\n# 28       MYC           2 NM_001354870.1.2\n\n# multiple transcript_ids\ngetIntronInfo(mytest,transId = c(\"NR_002196.2\",\"NM_002467.6\"))\n\n#               seqnames     start       end width strand                source   type\n# 1 chr11_ML143358v1_fix    188317    188397    81      - ncbiRefSeq.2022-10-28 intron\n# 2 chr11_ML143358v1_fix    188521    188600    80      - ncbiRefSeq.2022-10-28 intron\n# 3 chr11_ML143358v1_fix    188714    188808    95      - ncbiRefSeq.2022-10-28 intron\n# 4 chr11_ML143358v1_fix    188944    189039    96      - ncbiRefSeq.2022-10-28 intron\n# 5                 chr8 127736624 127738247  1624      + ncbiRefSeq.2022-10-28 intron\n# 6                 chr8 127739020 127740395  1376      + ncbiRefSeq.2022-10-28 intron\n#   score phase gene_id transcript_id gene_name exon_number       exon_id\n# 1    NA    NA     H19   NR_002196.2       H19           4 NR_002196.2.4\n# 2    NA    NA     H19   NR_002196.2       H19           3 NR_002196.2.3\n# 3    NA    NA     H19   NR_002196.2       H19           2 NR_002196.2.2\n# 4    NA    NA     H19   NR_002196.2       H19           1 NR_002196.2.1\n# 5    NA    NA     MYC   NM_002467.6       MYC           1 NM_002467.6.1\n# 6    NA    NA     MYC   NM_002467.6       MYC           2 NM_002467.6.2"},{"path":"extract-sequence.html","id":"extract-promoters","chapter":"2 Extract sequence","heading":"2.5 Extract promoters","text":"getPromoters allows extract promoter sequence gene:","code":"\n# get promoters\npro <- getPromoters(mytest,geneName = c(\"AAC1\",\"THI74\"))\n\npro\n# DNAStringSet object of length 2:\n#     width seq                                                                  names\n# [1]  2000 ATCGCGGTAAGCAGTCCCTGGAGACCATTTTAC...TAGAGGCAAAAAATAAAAAGTAAGCAGGAGAA THI74|YDR438W|YDR...\n# [2]  2000 CGGCTTTAAACCTGATGACGAAATTGGATTGTG...TTCTTTTCTATTTTTCCTTTTTACAGCAGTAA AAC1|YMR056C|YMR0...\n\n# same code\n# pro <- getPromoters(mytest,geneName = c(\"AAC1\",\"THI74\"),\n#                     up.extend = 2000,\n#                     dn.extend = 0)"},{"path":"extract-sequence.html","id":"extract-non-redundant-transcript-length","chapter":"2 Extract sequence","heading":"2.6 Extract non-redundant transcript length","text":"knonw, gene multiple isoforms. quantify gene expression\nstandard gene length. featureCounts command subread package \nused quantify gene expression using non-redundant exon length. getNonRedundantLength\ncan thing:","code":"\n# make object\nmytest <- loadGenomeGTF(gtfPath = \"hg38.ncbiRefSeq.gtf.gz\")\n\n## GenomeGTF object for Extracting sequences.\n## GTF file is loaded.\n## genome file is NULL.\n## representTrans file is NULL.\n## intron slot is NULL.\n\n# select 300 genes\ngene <- unique(mytest@gtf$gene_name)[1:200]\n\nlen <- getNonRedundantLength(object = mytest,geneName = gene)\n# getNonRedundantLength is running [=================================] 100% in 19s\n\n# check\nhead(len)\n\n#   gene_name gene_id exonLength\n# 1      TRNP    TRNP         68\n# 2      TRNT    TRNT         66\n# 3      CYTB    CYTB       1141\n# 4      TRNE    TRNE         69\n# 5       ND6     ND6        525\n# 6       ND5     ND5       1812"},{"path":"track-data-input.html","id":"track-data-input","chapter":"3 Track data input","heading":"3 Track data input","text":"many tools softwares visualize NGS(Next Generation Sequencing) data including\nChIP-SEQ, ATAC-SEQ, RNA-SEQ, Hic, HiChIP . R packages Gviz, plotgardener, ggcoverage ggbio popular tools\nvisualize NGS data R. Besides, online local softwares like IGV, Wubrowse ucsc genome browser. still limitations \nmake High-Quality Graphics Publication less code less time.\nsupply utilities functions totally based ggplot2 package visualize\nNGS data R create nice graph high-quality publication.Though written similar package transPlotR plays roles generating tracks plot. limitations shortcomings come\nuse package. devote develop expand functions.main plot function trackVisProMax function combined \ndata load input functions create track graph.","code":""},{"path":"track-data-input.html","id":"load-signal-data","chapter":"3 Track data input","heading":"3.1 Load signal data","text":"bigwig format binary wig ’s data size samller. recommend use \nformat. loadBigWig function can read bigwig data R based rtracklayer::import.bw.\nexamples load bigwig data:saving space, selected chromosome 5 chromosome 15 file, don’t\nspecify chrom parameter, loadBigWig return chromosomes. can\nalso specify file_name assign new name bigwig data.","code":"\nlibrary(BioSeqUtils)\n\n# load bigwig files\nfile <- list.files(path = \"test-bw/\",pattern = '.bw',full.names = T)\nfile\n# [1] \"test-bw/1cell-m6A-1.bw\" \"test-bw/1cell-m6A-2.bw\" \"test-bw/1cell-RNA-1.bw\"\n# [4] \"test-bw/1cell-RNA-2.bw\" \"test-bw/2cell-m6A-1.bw\" \"test-bw/2cell-m6A-2.bw\"\n# [7] \"test-bw/2cell-RNA-1.bw\" \"test-bw/2cell-RNA-2.bw\"\n\n# select some chromosomes for test\nbw <- loadBigWig(bw_file = file,chrom = c(\"5\",\"15\"))\n\n# check\nhead(bw,3)\n#   seqnames   start     end   score    fileName\n# 1       15       1 3054635 0.00000 1cell-m6A-1\n# 2       15 3054636 3054640 1.34079 1cell-m6A-1\n# 3       15 3054641 3054715 2.68159 1cell-m6A-1"},{"path":"track-data-input.html","id":"load-peaks-data","chapter":"3 Track data input","heading":"3.2 Load peaks data","text":"loadBed function allows read peaks data R ias baesd rtracklayer::import.bed.\nUsually select first three columns downstream analysis. can\nalso specify file_name assign new name bed data. \nexample read peaks data:","code":"\nbedfile <- list.files(path = \"./\",pattern = \".bed\")\n# [1] \"peaks.bed\"  \"peaks2.bed\"\n\nbed_df <- loadBed(bedfile)\n\n# check\nhead(bed_df,3)\n#   seqnames     start       end sampleName y\n# 1        5 142905501 142905600      peaks 1\n# 2        5 142903201 142903800      peaks 1\n# 3       15  61985342  61985900      peaks 1"},{"path":"track-data-input.html","id":"load-links-data","chapter":"3 Track data input","heading":"3.3 Load links data","text":"Links data often describe two interaction sites genomic positions. Hic\nHiChIP technologies can achive goal. data format can bed\nbedpe format. can supply 4 columns(chrom, start,\nend, value) format data. loadloops function allows read format\ndata R. Example shows following code:Note: supply file_name file.","code":"\nloop_file <- list.files(\"test-bw2/\",pattern = \".bedpe$\",full.names = T)\nloop_file\n# [1] \"test-bw2/C1-CTCF.bedpe\"    \"test-bw2/C1-H3K27ac.bedpe\" \"test-bw2/M1-CTCF.bedpe\"   \n# [4] \"test-bw2/M1-H3K27ac.bedpe\"\n\nfile_name = c(\"C1-CTCF\",\"C1-H3K27ac\",\"M1-CTCF\",\"M1-H3K27ac\")\n\n# test code\nloop_data <- loadloops(loop_file = loop_file,file_name = file_name,\n                       sep = \" \")\n\n# check\nhead(loop_data,3)\n\n#   seqnames     start       end    score fileName\n# 1    chr10 100002774 100022436 0.021354  C1-CTCF\n# 2    chr10 100002774 100069170 0.068404  C1-CTCF\n# 3    chr10 100002774 100185646 0.184670  C1-CTCF"},{"path":"track-data-input.html","id":"load-hic-related-data","chapter":"3 Track data input","heading":"3.4 Load Hic related data","text":"Hic related data format multiple includes .h5, .hic,\n.cool, .mcool . mainly depends kind \nsoft/tool upstream. usual format .hic .cool.\nfoucus fromat visualization. can use hicConvertFormat\ncommand HiCExplorer\nsoftware covert suitable format format file.Different upstream tools generate different resolution matrix data,\nplease make sure resolution Hic data using. .hic\ndata, can use strawr::readHicBpResolutions\nfunction check avaliable resolutions use, examples shows :readHicChroms function can used vies chromosome names data:prepareHic function allows read .hic .cool data.\nUsually data big size spend lot space memory.\nPlease making sure enough soures deal . \neamples:Test data can fetched GSE200160..hic data, use plotgardener::readHic function read data R\nupper-triangle matrix format.can extract multiple chromosomes multiple data:Besides, can define region extract:Test data can fetched GSE222637..cool data format, prepareHic runs slowly spend much memory:","code":"\n# install.packages(\"strawr\")\nlibrary(strawr)\n\n# test data\nreadHicBpResolutions(system.file(\"extdata\", \"test.hic\", package = \"strawr\"))\n# [1] 2500000\n\n# real data\nreadHicBpResolutions(\"test-bw2/RPE-ICRF193_5uM.hic\")\n# [1] 2500000 1000000  500000  250000  100000   50000   25000   10000    5000\n# test data\nreadHicChroms(system.file(\"extdata\", \"test.hic\", package = \"strawr\")) %>% \n  head()\n\n#   name    length\n# 1    1 249250621\n# 2   10 135534747\n# 3   11 135006516\n# 4   12 133851895\n# 5   13 115169878\n# 6   14 107349540\n\n# real data\nreadHicChroms(\"test-bw2/RPE-ICRF193_5uM.hic\") %>% head()\n#   name    length\n# 1    1 249250621\n# 2   10 135534747\n# 3   11 135006516\n# 4   12 133851895\n# 5   13 115169878\n# 6   14 107349540\nhic_data <- list.files(\"test-bw2/\",pattern = \".hic\",full.names = T)\nhic_data\n# [1] \"test-bw2/RPE-doxorubicin_02uM.hic\"  \"test-bw2/RPE-doxorubicin_034uM.hic\"\n# [3] \"test-bw2/RPE-ICRF193_5uM.hic\"\n\nhic_df <- prepareHic(hic_path = hic_data,\n                     file_name = c(\"doxorubicin_02uM\",\"doxorubicin_34uM\",\n                                   \"ICRF193_5uM\"),\n                     chrom = \"1\",assembly = \"hg19\",\n                     resolution = 10000)\n\n# check\nhead(hic_df[1:3,])\n#   seqnames  start   end     score         fileName id\n# 1     chr1 710000  5000  72.90664 doxorubicin_02uM  1\n# 2     chr1 715000     0 323.53738 doxorubicin_02uM  2\n# 3     chr1 715000 10000 212.93642 doxorubicin_02uM  3\nhic_df <- prepareHic(hic_path = hic_data,\n                     file_name = c(\"doxorubicin_02uM\",\"doxorubicin_34uM\",\n                                   \"ICRF193_5uM\"),\n                     chrom = c(\"1\",\"2\",\"3\"),assembly = \"hg19\",\n                     resolution = 10000)\n\n# check\nhead(hic_df[1:3,])\n#   seqnames  start   end     score         fileName id\n# 1     chr1 710000  5000  72.90664 doxorubicin_02uM  1\n# 2     chr1 715000     0 323.53738 doxorubicin_02uM  2\n# 3     chr1 715000 10000 212.93642 doxorubicin_02uM  3\nhic_df <- prepareHic(hic_path = hic_data,\n                     file_name = c(\"doxorubicin_02uM\",\"doxorubicin_34uM\",\n                                   \"ICRF193_5uM\"),\n                     chrom = \"1\",assembly = \"hg19\",\n                     chromstart = 20000000, chromend = 47500000,\n                     resolution = 10000)\n\n# check\nhead(hic_df[1:3,])\n#   seqnames    start  end     score         fileName id\n# 1     chr1 19995000    0  96.48324 doxorubicin_02uM  1\n# 2     chr1 20000000 5000  38.00954 doxorubicin_02uM  2\n# 3     chr1 20005000    0 102.91180 doxorubicin_02uM  3\nhic_data <- list.files(\"test-bw3/\",pattern = \".cool\",full.names = T)\nhic_data\n# [1] \"test-bw3/HiC_Adril-1_10kb.cool\" \"test-bw3/HiC_Ctrl-1_10kb.cool\"\n\nhic_df <- prepareHic(hic_path = hic_data,\n                     chrom = \"chr1\",\n                     resolution = 10000)\n\n# check\nhead(hic_df,3)\n#   seqnames    start      end score         fileName id\n# 1     chr1    -5000        0     4 HiC_Adril-1_10kb  1\n# 2     chr1    80000    85000     1 HiC_Adril-1_10kb  2\n# 3     chr1 59660000 59665000     1 HiC_Adril-1_10kb  3"},{"path":"track-data-input.html","id":"extract-junction-data","chapter":"3 Track data input","heading":"3.5 Extract junction data","text":"loadJunction can used load junctions data bed format\ndata records differential splice sites information tools identified\nbam file. latter use megadepth::bam_to_junctions \nextract junctions data return data frame format. details see\nmegadepth. show examples:score stands read count junctions. little time spend \nextarct junctions site bam files. recommend featch significant\njunction sites information softwares visualization.","code":"\nbam_file <- list.files(path = \"F:/junc-test/\",\n                       pattern = \".bam$\",full.names = T)\nbam_file\n# [1] \"F:/junc-test/C1.sorted.bam\" \"F:/junc-test/WT.sorted.bam\"\n\njunc_df <- loadJunction(data_path = bam_file,\n                        file_name = c(\"C1\",\"WT\"))\njunc_df <- junc_df %>% dplyr::filter(score >= 5)\n\n# check\nhead(junc_df,3)\n#   seqnames   start     end score fileName\n# 1        1 3154117 3159706     1       C1\n# 2        1 3207318 3213608     1       C1\n# 3        1 4492669 4493099     8       C1"},{"path":"basic-visualization.html","id":"basic-visualization","chapter":"4 Basic visualization","heading":"4 Basic visualization","text":"multiple chapters illustrate use trackVisProMax draw\nbasic tracks.Raw fastqs can fetched CRA003985,\nneed download map genome convert bam files bigwig format.First load test data R:","code":"\nlibrary(ggplot2)\nlibrary(BioSeqUtils)\n\n# load bigwig files\nfile <- list.files(path = \"test-bw/\",pattern = '.bw',full.names = T)\nfile\n# [1] \"test-bw/1cell-m6A-1.bw\" \"test-bw/1cell-m6A-2.bw\" \"test-bw/1cell-RNA-1.bw\"\n# [4] \"test-bw/1cell-RNA-2.bw\" \"test-bw/2cell-m6A-1.bw\" \"test-bw/2cell-m6A-2.bw\"\n# [7] \"test-bw/2cell-RNA-1.bw\" \"test-bw/2cell-RNA-2.bw\"\n\n# select some chromosomes for test\nbw <- loadBigWig(file,chrom = c(\"5\",\"15\"))\n\n# check\nhead(bw,3)\n#   seqnames   start     end   score    fileName\n# 1       15       1 3054635 0.00000 1cell-m6A-1\n# 2       15 3054636 3054640 1.34079 1cell-m6A-1\n# 3       15 3054641 3054715 2.68159 1cell-m6A-1\n\n# gtf\ngtf <- rtracklayer::import.gff(\"Mus_musculus.GRCm38.102.gtf\",format = \"gtf\") %>% \n  data.frame() "},{"path":"basic-visualization.html","id":"basic-plot","chapter":"4 Basic visualization","heading":"4.1 Basic plot","text":"Plot given one gene symbol (make sure gene_name column annotation file):Plot multiple genes time:can give named vector assign colors track:Adding genomic region label:Adding legend:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\",\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\"),\n               sample_fill_col = c(rep(c(\"red\",\"red\",\"grey50\",\"grey50\"),3)))\ntrmycol <- c(\"1cell-m6A-1\" = \"orange\", \"1cell-m6A-2\" = \"orange\", \n           \"1cell-RNA-1\" = \"green\", \"1cell-RNA-2\"  = \"green\",\n           \"2cell-m6A-1\" = \"blue\", \"2cell-m6A-2\" = \"blue\",\n           \"2cell-RNA-1\" = \"pink\", \"2cell-RNA-2\" = \"pink\")\n\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\"),\n               sample_fill_col = mycol)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\",\"Dnaaf5\",\"Zfp68\"),\n               add_gene_region_label = T)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\",\"Dnaaf5\",\"Zfp68\"),\n               add_gene_region_label = T,\n               signal_layer_bw_params = list(show.legend = T))"},{"path":"basic-visualization.html","id":"signal-range-settings","chapter":"4 Basic visualization","heading":"4.2 Signal range settings","text":"signal_range_pos can used change y axis limitation range label position:signal_range_label_params can used change y label styles:can see, signal range column panel, can set\nfixed_column_range = F make free scales panel:Giving named list named vectors control signal range panel:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\",\"Dnaaf5\"),\n               signal_range_pos = c(0.1,0.85))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\",\"Dnaaf5\"),\n               signal_range_pos = c(0.1,0.85),\n               signal_range_label_params = list(size = 2,color = \"red\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\",\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"),\n               fixed_column_range = F)\nsample <- c(\"1cell-m6A-1\",\"1cell-m6A-2\",\"1cell-RNA-1\",\"1cell-RNA-2\",\n            \"2cell-m6A-1\",\"2cell-m6A-2\",\"2cell-RNA-1\",\"2cell-RNA-2\")\n\nKmt2d_rg <- c(rep(4000,2),rep(8000,2),rep(4000,4))\nnames(Kmt2d_rg) <- sample\nKmt2d_rg\n# 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 \n# 4000        4000        8000        8000        4000        4000        4000        4000 \n\nDnaaf5_rg <- c(rep(1000,2),rep(5000,2),rep(2000,4))\nnames(Dnaaf5_rg) <- sample\nDnaaf5_rg\n# 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 \n# 1000        1000        5000        5000        2000        2000        2000        2000 \n\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\",\"Dnaaf5\"),\n               signal_range = list(Kmt2d = Kmt2d_rg,\n                                   Dnaaf5 = Dnaaf5_rg))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Kmt2d\",\"Dnaaf5\"),\n               signal_range = list(Kmt2d = c(\"1cell-m6A-1\" = 8000),\n                                   Dnaaf5 = c(\"1cell-m6A-1\" = 1000)))"},{"path":"basic-visualization.html","id":"transcript-track-settings","chapter":"4 Basic visualization","heading":"4.3 Transcript track settings","text":"illustrate related parameters draw transcript track. trans_topN \nused control many transcripts gene drawn track. default\nshow top 2 longest transcripts according transcipt exon length. \ncan change values:Showing top 5 transcripts:collapse_trans parameter allows collapse transcripts \nshown trans track:Setting trans_topN = “” can show transcripts gene:can also collapse transcripts:rel_len control arrow densities transcript, can check createSegment\nfunction details. arrow_rel_len_params_list accepts list parameters \ncontrol arrows generated. rel_len smaller, arrows generated:controls arrows:Changing arrow styles:Changing arrow colors:add_gene_label_layer allows mark gene symbols beside transcript:exon_width allows change exon width:gene_dist_mark_params gene_dist_mark_text_params control segment\n(arrow direction stands transciption direction) chromosome label styles upper transcript:Viewing transcript structures gene supply signal data\n(bigwig,peaks …):Showing transcripts:Collapsing transcripts:Plotting genomic region:Showing transcripts:can also map exon color different feature types:trans_fill_col accepts character vectors named vectors control exon\nfill colors:Removing legend:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"),\n               trans_topN = 1)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"),\n               trans_topN = 5)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"),\n               trans_topN = 5,\n               collapse_trans = T)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"),\n               trans_topN = \"all\")\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"),\n               trans_topN = \"all\",\n               collapse_trans = T)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               arrow_rel_len_params_list = list(rel_len = 0.2))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               arrow_rel_len_params_list = list(rel_len = 0.15),\n               trans_exon_arrow_params = list(fill = \"red\",color = \"red\",\n                                              linewidth = 1))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               arrow_rel_len_params_list = list(rel_len = 0.15),\n               trans_exon_arrow_params = list(arrow = arrow(type = \"open\",\n                                                            length = unit(3,\"mm\"))))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               trans_exon_col_params = list(fill = \"black\",color = \"black\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               collapse_trans = T,\n               add_gene_label_layer = T,\n               gene_label_shift_y = -0.5)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               exon_width = 0.9)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\"),\n               gene_dist_mark_params = list(color = \"blue\",size = 1),\n               gene_dist_mark_text_params = list(color = \"red\",size = 2))\ntrackVisProMax(Input_gtf = gtf,\n               Input_gene = c(\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_gene = c(\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"),\n               trans_topN = \"all\")\ntrackVisProMax(Input_gtf = gtf,\n               Input_gene = c(\"Dnaaf5\",\"Zfp68\",\"Pabpc1\"),\n               trans_topN = \"all\",\n               collapse_trans = T)\ntrackVisProMax(Input_gtf = gtf,\n               query_region = list(query_chr = c(\"5\",\"15\"),\n                                   query_start = c(65438603,9263295),\n                                   query_end = c(65834288,9785835)))\ntrackVisProMax(Input_gtf = gtf,\n               query_region = list(query_chr = c(\"5\",\"15\"),\n                                   query_start = c(65438603,9263295),\n                                   query_end = c(65834288,9785835)),\n               trans_topN = \"all\")\n# gtf\nraw_gtf <- rtracklayer::import.gff(\"test-bw2/hg19.ncbiRefSeq.gtf.gz\",format = \"gtf\") %>% \n  data.frame() \n\ntrackVisProMax(Input_gtf = raw_gtf,\n               Input_gene = c(\"MYC\",\"NANOG\",\"MALAT1\"),\n               trans_topN = \"all\",\n               trans_exon_col_params = list(mapping = aes(fill = type)))\ntrackVisProMax(Input_gtf = raw_gtf,\n               Input_gene = c(\"MYC\",\"NANOG\",\"MALAT1\"),\n               trans_topN = \"all\",\n               trans_exon_col_params = list(mapping = aes(fill = type)),\n               trans_fill_col = ggsci::pal_igv()(6))\ntrackVisProMax(Input_gtf = raw_gtf,\n               Input_gene = c(\"MYC\",\"NANOG\",\"MALAT1\"),\n               trans_topN = \"all\",\n               trans_exon_col_params = list(mapping = aes(fill = type),\n                                            show.legend = F),\n               trans_fill_col = ggsci::pal_locuszoom()(6))"},{"path":"basic-visualization.html","id":"x-axis-limitation","chapter":"4 Basic visualization","heading":"4.4 X axis limitation","text":"Basiclly trackVisProMax constructed based ggplot. can’t\ndirectlly use ggplot2::xlim function adjust X axis limitation.\nxlimit_range parameter supplied control X axis limits can\nzoom interested region:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\"),\n               xlimit_range = list(c(142904344,142904782),\n                                   c(61987507,61988278)))"},{"path":"basic-visualization.html","id":"background-and-highlight-region-settings","chapter":"4 Basic visualization","heading":"4.5 Background and highlight region settings","text":"Maybe need highlight regions interested set\nbackground color track enhance track visualization \npurpose. Let’s show examples goal.background_color_region accepts named list named vectors control\nbackground colors panel:can also set background color specified panel:background_region_alpha controls color transparency:higlight_region accepts named list genomic coordinates want highlight.\nhiglight_col also accepts named list control highlighted region colors:higlight_col_alpha controls color transparency:","code":"\nsample <- c(\"1cell-m6A-1\",\"1cell-m6A-2\",\"1cell-RNA-1\",\"1cell-RNA-2\",\n            \"2cell-m6A-1\",\"2cell-m6A-2\",\"2cell-RNA-1\",\"2cell-RNA-2\")\n\nActb_col <- rep(ggsci::pal_npg()(4),each = 2)\nnames(Actb_col) <- sample\nActb_col\n# 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 \n# \"#E64B35FF\" \"#E64B35FF\" \"#4DBBD5FF\" \"#4DBBD5FF\" \"#00A087FF\" \"#00A087FF\" \"#3C5488FF\" \"#3C5488FF\" \n\nMyc_col <- rep(ggsci::pal_d3()(4),each = 2)\nnames(Myc_col) <- sample\nMyc_col\n# 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 \n# \"#1F77B4FF\" \"#1F77B4FF\" \"#FF7F0EFF\" \"#FF7F0EFF\" \"#2CA02CFF\" \"#2CA02CFF\" \"#D62728FF\" \"#D62728FF\"\n\nMtdh_col <- rep(ggsci::pal_lancet()(4),each = 2)\nnames(Mtdh_col) <- sample\nMtdh_col\n# 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 \n# \"#00468BFF\" \"#00468BFF\" \"#ED0000FF\" \"#ED0000FF\" \"#42B540FF\" \"#42B540FF\" \"#0099B4FF\" \"#0099B4FF\" \n\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               background_color_region = list(Actb = Actb_col,\n                                              Myc = Myc_col,\n                                              Mtdh = Mtdh_col))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               background_color_region = list(Myc = Myc_col))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               background_color_region = list(Actb = Actb_col,\n                                              Myc = Myc_col,\n                                              Mtdh = Mtdh_col),\n               background_region_alpha = 0.75)\nhiglight_region <- list(Actb = list(start = c(142904000),\n                                    end = c(142904500)),\n                        Myc = list(start = c(61986000,61989500),\n                                   end = c(61986500,61989900)))\n\nhiglight_col <- list(Actb = c(\"pink\"),\n                     Myc = c(\"orange\",\"green\"))\n\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               higlight_region = higlight_region,\n               higlight_col = higlight_col)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               higlight_region = higlight_region,\n               higlight_col = higlight_col,\n               higlight_col_alpha = 0.5)"},{"path":"basic-visualization.html","id":"order-for-genes-and-samples","chapter":"4 Basic visualization","heading":"4.6 Order for genes and samples","text":"Probably re-order gene sample orders graph. Generally\nspeaking, whether gene orders sample orders, orders initially\nassigned according input orders. just need adjust\ninput orders. Even , also supply\ngene_order sample_order extra parameters re-order genes \nsamples:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               gene_order = c(\"Mtdh\",\"Myc\",\"Actb\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               gene_order = c(\"Mtdh\",\"Myc\",\"Actb\"),\n               sample_order = rev(sample))"},{"path":"basic-visualization.html","id":"adding-group-information-for-genes-and-samples","chapter":"4 Basic visualization","heading":"4.7 Adding group information for genes and samples","text":"Grouping genes samples can clarify author’s experiment design different\nconditions treatment. drawing group graphic elements multiple genes \nsamples stands author want express. picture worth thousand words.gene_group_info, gene_group_info2,sample_group_info \nsample_group_info2 accepts named list vectors add group information.can add two group information genes samples enough\nus. following codes show add group information modify graphic\nattributes.Adding sample group information:Note: panel.spacing used add spacing panel along \nY axis can show line gaps different sample group.Adding one group:gene_group_info_order, gene_group_info2_order,sample_group_info_order \nsample_group_info2_order separatelly control group orders:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\",\"Zfp68\",\"Pabpc1\"),\n               gene_group_info = list(cluster1 = c(\"Actb\",\"Myc\"),\n                                      cluster2 = c(\"Mtdh\",\"Adamts3\"),\n                                      cluster3 = c(\"Zfp68\",\"Pabpc1\")))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\",\"Zfp68\",\"Pabpc1\"),\n               gene_group_info = list(cluster1 = c(\"Actb\",\"Myc\"),\n                                      cluster2 = c(\"Mtdh\",\"Adamts3\"),\n                                      cluster3 = c(\"Zfp68\",\"Pabpc1\")),\n               sample_group_info = list(\"input\" = c(\"1cell-RNA-1\", \"1cell-RNA-2\",\n                                                    \"2cell-RNA-1\", \"2cell-RNA-2\"),\n                                        \"treat\" = c(\"1cell-m6A-1\", \"1cell-m6A-2\",\n                                                    \"2cell-m6A-1\", \"2cell-m6A-2\")),\n               panel.spacing = c(0.2,0.2))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\",\"Zfp68\",\"Pabpc1\"),\n               gene_group_info = list(cluster1 = c(\"Actb\",\"Myc\"),\n                                      cluster2 = c(\"Mtdh\",\"Adamts3\"),\n                                      cluster3 = c(\"Zfp68\",\"Pabpc1\")),\n               gene_group_info2 = list(geneGroup1 = c(\"Actb\",\"Myc\",\"Mtdh\"),\n                                       geneGroup2 = c(\"Adamts3\",\"Zfp68\",\"Pabpc1\")),\n               sample_group_info = list(\"input\" = c(\"1cell-RNA-1\", \"1cell-RNA-2\",\n                                                    \"2cell-RNA-1\", \"2cell-RNA-2\"),\n                                        \"treat\" = c(\"1cell-m6A-1\", \"1cell-m6A-2\",\n                                                    \"2cell-m6A-1\", \"2cell-m6A-2\")),\n               sample_group_info2 = list(\"cellState1\" = c(\"1cell-RNA-1\", \"1cell-RNA-2\",\n                                                          \"1cell-m6A-1\", \"1cell-m6A-2\"),\n                                         \"cellState2\" = c(\"2cell-RNA-1\", \"2cell-RNA-2\",\n                                                          \"2cell-m6A-1\", \"2cell-m6A-2\")),\n               panel.spacing = c(0.2,0.2))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\",\"Zfp68\",\"Pabpc1\"),\n               gene_group_info = list(cluster1 = c(\"Actb\",\"Myc\"),\n                                      cluster2 = c(\"Mtdh\",\"Adamts3\"),\n                                      cluster3 = c(\"Zfp68\",\"Pabpc1\")),\n               gene_group_info_order = c(\"cluster3\",\"cluster2\",\"cluster1\"),\n               gene_group_info2 = list(geneGroup1 = c(\"Actb\",\"Myc\",\"Mtdh\"),\n                                       geneGroup2 = c(\"Adamts3\",\"Zfp68\",\"Pabpc1\")),\n               gene_group_info2_order = c(\"geneGroup2\",\"geneGroup1\"),\n               sample_group_info = list(\"input\" = c(\"1cell-RNA-1\", \"1cell-RNA-2\",\n                                                    \"2cell-RNA-1\", \"2cell-RNA-2\"),\n                                        \"treat\" = c(\"1cell-m6A-1\", \"1cell-m6A-2\",\n                                                    \"2cell-m6A-1\", \"2cell-m6A-2\")),\n               sample_group_info_order = c(\"treat\",\"input\"),\n               sample_group_info2 = list(\"cellState1\" = c(\"1cell-RNA-1\", \"1cell-RNA-2\",\n                                                          \"1cell-m6A-1\", \"1cell-m6A-2\"),\n                                         \"cellState2\" = c(\"2cell-RNA-1\", \"2cell-RNA-2\",\n                                                          \"2cell-m6A-1\", \"2cell-m6A-2\")),\n               sample_group_info2_order = c(\"cellState2\",\"cellState1\"),\n               panel.spacing = c(0.2,0.2))"},{"path":"basic-visualization.html","id":"strip-settings","chapter":"4 Basic visualization","heading":"4.8 Strip settings","text":"chapter shows us modify strip graphic element instead using\nlines separate group.column_strip_setting_list row_strip_setting_list accept named list\nmodify strip element_rect element columns rows:column_strip_text_setting_list row_strip_text_setting_list accept named list\nmodify strip element_text element columns rows:by_layer_x by_layer_y can setted TRUE can modify \ngraphic element row column:details can check ggh4x::strip_themed function.","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               column_strip_setting_list = list(color = rep(\"red\",3),\n                                                fill = rep(\"grey80\",3)),\n               row_strip_setting_list = list(color = rep(\"black\",8),\n                                             fill = rep(c(\"orange\",\"purple\"),each = c(2,2),\n                                                        times = 2)))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\"),\n               column_strip_setting_list = list(color = rep(\"red\",3),\n                                                fill = rep(\"grey80\",3)),\n               column_strip_text_setting_list = list(color = \"darkred\",size = 8,\n                                                     fontface = \"bold\"),\n               row_strip_setting_list = list(color = rep(\"black\",8),\n                                             fill = rep(c(\"orange\",\"purple\"),each = c(2,2),\n                                                        times = 2)),\n               row_strip_text_setting_list = list(fontface = \"italic.bold\",color = \"white\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\",\"Zfp68\",\"Pabpc1\"),\n               gene_group_info = list(cluster1 = c(\"Actb\",\"Myc\"),\n                                      cluster2 = c(\"Mtdh\",\"Adamts3\"),\n                                      cluster3 = c(\"Zfp68\",\"Pabpc1\")),\n               gene_group_info2 = list(geneGroup1 = c(\"Actb\",\"Myc\",\"Mtdh\"),\n                                       geneGroup2 = c(\"Adamts3\",\"Zfp68\",\"Pabpc1\")),\n               by_layer_x = T,\n               column_strip_setting_list = list(fill = c(\"grey80\",\"blue\",\"green\")),\n               sample_group_info = list(\"input\" = c(\"1cell-RNA-1\", \"1cell-RNA-2\",\n                                                    \"2cell-RNA-1\", \"2cell-RNA-2\"),\n                                        \"treat\" = c(\"1cell-m6A-1\", \"1cell-m6A-2\",\n                                                    \"2cell-m6A-1\", \"2cell-m6A-2\")),\n               sample_group_info2 = list(\"cellState1\" = c(\"1cell-RNA-1\", \"1cell-RNA-2\",\n                                                          \"1cell-m6A-1\", \"1cell-m6A-2\"),\n                                         \"cellState2\" = c(\"2cell-RNA-1\", \"2cell-RNA-2\",\n                                                          \"2cell-m6A-1\", \"2cell-m6A-2\")),\n               by_layer_y = T,\n               row_strip_setting_list = list(fill = c(\"purple\",\"yellow\",\"pink\")),\n               panel.spacing = c(0.2,0.2))"},{"path":"basic-visualization.html","id":"draw-chromosome-annotation","chapter":"4 Basic visualization","heading":"4.9 Draw chromosome annotation","text":"can add corresponding genome ideogram data show chromosome structure\ngene. First load ideogram data. prepared genome like\nmm10, hg39, hg19 can loaded use directly. genome versions,\ncan use BioSeqUtils::catchIdeoData function download .catchIdeoData returns list object:draw_chromosome setted TRUE want add chromosome\nfacet annotation. draw_chromosome_params accepts named list control\nchromosome structure drawn. details please refer \nBioSeqUtils::drawChromosome function. Now add chromosome facet track \ncorresponding genes:remove_chrom_panel_border can used remove chromosome track\npanel borders:can also use remove_all_panel_border remove track panel borders\nconcise presentation:panel_size_setting allows set width height panel.\nreduce chromosome panel height:Let’s add group informations:","code":"\ndata(\"mm10_obj\")\n\nstr(mm10_obj)\n# List of 3\n# $ plot_df     :'data.frame':  403 obs. of  6 variables:\n#   ..$ chr        : chr [1:403] \"chr1\" \"chr1\" \"chr1\" \"chr1\" ...\n# ..$ chromStart : num [1:403] 0 8840440 12278390 20136559 22101102 ...\n# ..$ chromEnd   : num [1:403] 8840440 12278390 20136559 22101102 30941543 ...\n# ..$ name       : chr [1:403] \"qA1\" \"qA2\" \"qA3\" \"qA4\" ...\n# ..$ gieStain   : chr [1:403] \"gpos100\" \"gneg\" \"gpos33\" \"gneg\" ...\n# ..$ gieStainCol: chr [1:403] \"black\" \"white\" \"gray67\" \"white\" ...\n# $ border_df   : tibble [21 × 3] (S3: tbl_df/tbl/data.frame)\n# ..$ chr : chr [1:21] \"chr1\" \"chr10\" \"chr11\" \"chr12\" ...\n# ..$ xmin: num [1:21] 0 0 0 0 0 0 0 0 0 0 ...\n# ..$ xmax: num [1:21] 1.95e+08 1.31e+08 1.22e+08 1.20e+08 1.20e+08 ...\n# $ acen_plot_df: NULL\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\"),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = mm10_obj))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\"),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = mm10_obj),\n               remove_chrom_panel_border = T)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\"),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = mm10_obj),\n               remove_all_panel_border = T)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\"),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = mm10_obj),\n               remove_chrom_panel_border = T,\n               panel_size_setting = list(rows = rep(c(4,4,4,4,4,4,4,4,4,2),4),\n                                         cols = rep(12,4)))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_gene = c(\"Actb\",\"Myc\",\"Mtdh\",\"Adamts3\"),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = mm10_obj),\n               remove_chrom_panel_border = T,\n               panel_size_setting = list(rows = rep(c(4,4,4,4,4,4,4,4,4,2),4),\n                                         cols = rep(12,4)),\n               gene_group_info = list(cluster1 = c(\"Actb\",\"Myc\"),\n                                      cluster2 = c(\"Mtdh\",\"Adamts3\"),\n                                      cluster3 = c(\"Zfp68\",\"Pabpc1\")),\n               sample_group_info = list(\"input\" = c(\"1cell-RNA-1\", \"1cell-RNA-2\",\n                                                    \"2cell-RNA-1\", \"2cell-RNA-2\"),\n                                        \"treat\" = c(\"1cell-m6A-1\", \"1cell-m6A-2\",\n                                                    \"2cell-m6A-1\", \"2cell-m6A-2\")),\n               panel.spacing = c(0.2,0.2))"},{"path":"basic-visualization.html","id":"plot-with-specified-genomic-region","chapter":"4 Basic visualization","heading":"4.10 Plot with specified genomic region","text":"Maybe sometimes need show track information given specified\ngenomic region instead genes. can give named list query_region\ndraw different genomic region tracks. Multiple genomic positions also can \naccepted.Examples show :Modifing transcript arrow styles show trancripts:details trans track:Adding gene labels:Collapsing transcripts:Adding chromosome structure:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               query_region = list(query_chr = c(\"5\",\"15\"),\n                                   query_start = c(65438603,9263295),\n                                   query_end = c(65834288,9785835)))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               query_region = list(query_chr = c(\"5\",\"15\"),\n                                   query_start = c(65438603,9263295),\n                                   query_end = c(65834288,9785835)),\n               trans_topN = \"all\",\n               fixed_column_range = F,\n               trans_exon_arrow_params = list(arrow = arrow(length = unit(0.3,\"mm\")),\n                                              linewidth = 0.2))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               query_region = list(query_chr = c(\"5\",\"15\"),\n                                   query_start = c(65438603,9263295),\n                                   query_end = c(65834288,9785835)),\n               trans_topN = \"all\",\n               fixed_column_range = F,\n               trans_exon_arrow_params = list(arrow = arrow(length = unit(0.3,\"mm\")),\n                                              linewidth = 0.2),\n               add_gene_label_layer = T,\n               gene_label_params = list(size = 1,segment.size = 0.1))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               query_region = list(query_chr = c(\"5\",\"15\"),\n                                   query_start = c(65438603,9263295),\n                                   query_end = c(65834288,9785835)),\n               collapse_trans = T,\n               fixed_column_range = F,\n               trans_exon_arrow_params = list(arrow = arrow(length = unit(0.3,\"mm\")),\n                                              linewidth = 0.2),\n               add_gene_label_layer = T,\n               gene_label_params = list(size = 1,segment.size = 0.1),\n               gene_label_shift_y = -0.5)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               query_region = list(query_chr = c(\"5\",\"15\"),\n                                   query_start = c(65438603,9263295),\n                                   query_end = c(65834288,9785835)),\n               trans_topN = \"all\",\n               fixed_column_range = F,\n               trans_exon_arrow_params = list(arrow = arrow(length = unit(0.3,\"mm\")),\n                                              linewidth = 0.2),\n               add_gene_label_layer = T,\n               gene_label_params = list(size = 1,segment.size = 0.1),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = mm10_obj))"},{"path":"basic-visualization.html","id":"adding-peaks-track","chapter":"4 Basic visualization","heading":"4.11 Adding peaks track","text":"don’t draw peaks file assign new panel. put one\npanel enough. similar trans panel. Input_bed accepts\npeaks data output loadBed function. first load peaks data:Plotting peaks track:peak_width controls peaks rectangle height:peak_fill_col controls peaks rectangle colors:Adding chromosomes:","code":"\nbedfile <- list.files(path = \"./\",pattern = \".bed\")\n# [1] \"peaks.bed\"  \"peaks2.bed\"\n\nbed_df <- loadBed(bedfile)\n\n# check\nhead(bed_df,3)\n#   seqnames     start       end sampleName y\n# 1        5 142905501 142905600      peaks 1\n# 2        5 142903201 142903800      peaks 1\n# 3       15  61985342  61985900      peaks 1\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_bed = bed_df,\n               Input_gene = c(\"Actb\",\"Myc\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_bed = bed_df,\n               Input_gene = c(\"Actb\",\"Myc\"),\n               peak_width = 0.9)\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_bed = bed_df,\n               Input_gene = c(\"Actb\",\"Myc\"),\n               peak_width = 0.9,\n               peak_fill_col = c(peaks = \"orange\",peaks2 = \"purple\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               Input_bed = bed_df,\n               Input_gene = c(\"Actb\",\"Myc\"),\n               peak_width = 0.9,\n               peak_fill_col = c(peaks = \"orange\",peaks2 = \"purple\"),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = mm10_obj))"},{"path":"loops-visualization.html","id":"loops-visualization","chapter":"5 Loops visualization","heading":"5 Loops visualization","text":"Hi-C, HiChIP ChIA-PET sequencing technologies, aim \ncatch three dimension interaction chromosomes. Finding interaction sites\nvisualize demand. Usually use arch links represent \ninteraction information.","code":""},{"path":"loops-visualization.html","id":"input-data-prepration","chapter":"5 Loops visualization","heading":"5.1 Input data prepration","text":"Test data can fetched GSE200165.can use loadloops function load interaction sites data:Test data can fetched GSE200160.also load bigwig data:","code":"\nloop_file <- list.files(\"test-bw2/\",pattern = \".bedpe$\",full.names = T)\nloop_file\n# [1] \"test-bw2/C1-CTCF.bedpe\"    \"test-bw2/C1-H3K27ac.bedpe\" \"test-bw2/M1-CTCF.bedpe\"   \n# [4] \"test-bw2/M1-H3K27ac.bedpe\"\n\nfile_name = c(\"C1-CTCF\",\"C1-H3K27ac\",\"M1-CTCF\",\"M1-H3K27ac\")\n\n# test code\nloop_data <- loadloops(loop_file = loop_file,file_name = file_name,\n                       sep = \" \")\n\n# check\nhead(loop_data,3)\n\n#   seqnames     start       end    score fileName\n# 1    chr10 100002774 100022436 0.021354  C1-CTCF\n# 2    chr10 100002774 100069170 0.068404  C1-CTCF\n# 3    chr10 100002774 100185646 0.184670  C1-CTCF\n# bigwig\nfile <- list.files(path = \"test-bw2/\",pattern = '.bw',full.names = T)\n# [1] \"test-bw2/ChIP-CTCF-MYC1.bw\"    \"test-bw2/ChIP-H3K27ac-MYC1.bw\" \"test-bw2/ChIP-Input-MYC1.bw\"  \n# [4] \"test-bw2/ChIP-MYC-MYC1.bw\"\n\nbw <- loadBigWig(bw_file = file,chrom = \"8\")\nbw$seqnames <- paste(\"chr\",bw$seqnames,sep = \"\")\n\n# gtf\ngtf <- rtracklayer::import.gff(\"test-bw2/hg19.ncbiRefSeq.gtf.gz\",format = \"gtf\") %>% \n  data.frame() "},{"path":"loops-visualization.html","id":"basic-loops-visualization","chapter":"5 Loops visualization","heading":"5.2 Basic loops visualization","text":"legend score means distance across two interaction sites. higher score,\nlonger distance:loops_col controls color links:signal_layer_loop_params accepts named list control links layer,\ndetails, please check ggbio::geom_arch. turn legend:max.height can make links panel height :linewidth changes links linewidth:can arrange sample order:","code":"\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr8\",\n                                   query_start = 100010290,\n                                   query_end = 101157229),\n               Input_loop = loop_data,\n               fixed_column_range = F)\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr8\",\n                                   query_start = 100010290,\n                                   query_end = 101157229),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               loops_col = c(\"white\",\"blue\"))\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr8\",\n                                   query_start = 100010290,\n                                   query_end = 101157229),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               loops_col = c(\"white\",\"blue\"),\n               signal_layer_loop_params = list(show.legend = F))\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr8\",\n                                   query_start = 100010290,\n                                   query_end = 101157229),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               signal_layer_loop_params = list(max.height = 12))\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr8\",\n                                   query_start = 100010290,\n                                   query_end = 101157229),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               signal_layer_loop_params = list(linewidth = 1))\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr8\",\n                                   query_start = 100010290,\n                                   query_end = 101157229),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               sample_order = c(\"M1-CTCF\",\"ChIP-CTCF-MYC1\",\n                                \"C1-CTCF\",\"ChIP-MYC-MYC1\",\n                                \"M1-H3K27ac\",\"ChIP-H3K27ac-MYC1\",\n                                \"C1-H3K27ac\",\"ChIP-Input-MYC1\"))"},{"path":"loops-visualization.html","id":"reverse-y-axis","chapter":"5 Loops visualization","heading":"5.3 Reverse Y axis","text":"reverse_y_vars allows reverse Y axis signal track,\nneed give track character name:can reverse bigwig track Y axis:Let’s draw multiple genomic regions:","code":"\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr8\",\n                                   query_start = 100010290,\n                                   query_end = 101157229),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               sample_order = c(\"ChIP-CTCF-MYC1\",\"M1-CTCF\",\n                                \"ChIP-MYC-MYC1\",\"C1-CTCF\",\n                                \"ChIP-H3K27ac-MYC1\",\"M1-H3K27ac\",\n                                \"ChIP-Input-MYC1\",\"C1-H3K27ac\"),\n               reverse_y_vars = c(\"M1-CTCF\",\"C1-CTCF\",\n                                  \"M1-H3K27ac\",\"C1-H3K27ac\"))\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr8\",\n                                   query_start = 100010290,\n                                   query_end = 101157229),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               sample_order = c(\"M1-CTCF\",\"ChIP-CTCF-MYC1\",\n                                \"C1-CTCF\",\"ChIP-MYC-MYC1\",\n                                \"M1-H3K27ac\",\"ChIP-H3K27ac-MYC1\",\n                                \"C1-H3K27ac\",\"ChIP-Input-MYC1\"),\n               reverse_y_vars = c(\"ChIP-CTCF-MYC1\",\"ChIP-MYC-MYC1\",\n                                  \"ChIP-H3K27ac-MYC1\",\"ChIP-Input-MYC1\"))\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = c(\"chr8\",\"chr8\"),\n                                   query_start = c(100010290,65831189),\n                                   query_end = c(101157229,67351272)),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               sample_order = c(\"ChIP-CTCF-MYC1\",\"M1-CTCF\",\n                                \"ChIP-MYC-MYC1\",\"C1-CTCF\",\n                                \"ChIP-H3K27ac-MYC1\",\"M1-H3K27ac\",\n                                \"ChIP-Input-MYC1\",\"C1-H3K27ac\"),\n               reverse_y_vars = c(\"M1-CTCF\",\"C1-CTCF\",\n                                  \"M1-H3K27ac\",\"C1-H3K27ac\"))"},{"path":"loops-visualization.html","id":"combing-with-chromosome-track","chapter":"5 Loops visualization","heading":"5.4 Combing with chromosome track","text":"Adding chromosome tracks:Adding group information:","code":"\ndata(\"hg19_obj\")\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = c(\"chr8\",\"chr8\"),\n                                   query_start = c(100010290,65831189),\n                                   query_end = c(101157229,67351272)),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               sample_order = c(\"ChIP-CTCF-MYC1\",\"M1-CTCF\",\n                                \"ChIP-MYC-MYC1\",\"C1-CTCF\",\n                                \"ChIP-H3K27ac-MYC1\",\"M1-H3K27ac\",\n                                \"ChIP-Input-MYC1\",\"C1-H3K27ac\"),\n               reverse_y_vars = c(\"M1-CTCF\",\"C1-CTCF\",\n                                  \"M1-H3K27ac\",\"C1-H3K27ac\"),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj))\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = c(\"chr8\",\"chr8\"),\n                                   query_start = c(100010290,65831189),\n                                   query_end = c(101157229,67351272)),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               sample_order = c(\"ChIP-CTCF-MYC1\",\"M1-CTCF\",\n                                \"ChIP-MYC-MYC1\",\"C1-CTCF\",\n                                \"ChIP-H3K27ac-MYC1\",\"M1-H3K27ac\",\n                                \"ChIP-Input-MYC1\",\"C1-H3K27ac\"),\n               reverse_y_vars = c(\"M1-CTCF\",\"C1-CTCF\",\n                                  \"M1-H3K27ac\",\"C1-H3K27ac\"),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj),\n               sample_group_info = list(state1 = c(\"ChIP-CTCF-MYC1\",\"M1-CTCF\"),\n                                        state2 = c(\"ChIP-MYC-MYC1\",\"C1-CTCF\"),\n                                        histoneMarker = c(\"ChIP-H3K27ac-MYC1\",\"M1-H3K27ac\"),\n                                        inputControl = c(\"ChIP-Input-MYC1\",\"C1-H3K27ac\")),\n               panel.spacing = c(0.2,0.2))"},{"path":"loops-visualization.html","id":"higlight-regions","chapter":"5 Loops visualization","heading":"5.5 Higlight regions","text":"Adding highlight regions:","code":"\nhiglight_region <- list(\"chr8:100010290-101157229\" = list(start = c(100310290),\n                                                          end = c(100457229)),\n                        \"chr8:65831189-67351272\" = list(start = c(65931189,66231189),\n                                                        end = c(66051272,66351272)))\n\nhiglight_col <- list(Actb = c(\"purple\"),\n                     Myc = c(\"yellow\",\"green\"))\n\ntrackVisProMax(Input_bw = bw,\n               Input_gtf = gtf,\n               query_region = list(query_chr = c(\"chr8\",\"chr8\"),\n                                   query_start = c(100010290,65831189),\n                                   query_end = c(101157229,67351272)),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               sample_order = c(\"ChIP-CTCF-MYC1\",\"M1-CTCF\",\n                                \"ChIP-MYC-MYC1\",\"C1-CTCF\",\n                                \"ChIP-H3K27ac-MYC1\",\"M1-H3K27ac\",\n                                \"ChIP-Input-MYC1\",\"C1-H3K27ac\"),\n               reverse_y_vars = c(\"M1-CTCF\",\"C1-CTCF\",\n                                  \"M1-H3K27ac\",\"C1-H3K27ac\"),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj),\n               sample_group_info = list(state1 = c(\"ChIP-CTCF-MYC1\",\"M1-CTCF\"),\n                                        state2 = c(\"ChIP-MYC-MYC1\",\"C1-CTCF\"),\n                                        histoneMarker = c(\"ChIP-H3K27ac-MYC1\",\"M1-H3K27ac\"),\n                                        inputControl = c(\"ChIP-Input-MYC1\",\"C1-H3K27ac\")),\n               panel.spacing = c(0.2,0.2),\n               higlight_region = higlight_region,\n               higlight_col = higlight_col)"},{"path":"loops-visualization.html","id":"drawing-only-loop-tracks","chapter":"5 Loops visualization","heading":"5.6 Drawing only loop tracks","text":"can plot loops graph without bigwig track:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               query_region = list(query_chr = c(\"chr8\",\"chr8\"),\n                                   query_start = c(100010290,65831189),\n                                   query_end = c(101157229,67351272)),\n               Input_loop = loop_data,\n               fixed_column_range = F,\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj),\n               sample_group_info = list(state1 = c(\"C1-CTCF\",\"M1-CTCF\"),\n                                        state2 = c(\"M1-H3K27ac\",\"C1-H3K27ac\")),\n               panel.spacing = c(0.2,0.2))"},{"path":"hic-heatmap-visualization.html","id":"hic-heatmap-visualization","chapter":"6 Hic heatmap visualization","heading":"6 Hic heatmap visualization","text":"related Hic data input discussed . prepareHic function\nused data preparation step. use test data \nplotgardenerData package examples. Package plotgardener outputs\nfollowing results:Let’s use trackVisProMax finish .","code":""},{"path":"hic-heatmap-visualization.html","id":"data-preperation","chapter":"6 Hic heatmap visualization","heading":"6.1 Data preperation","text":"Load Hic data:Load bigwig data:","code":"\nlibrary(plotgardenerData)\nlibrary(plotgardener)\n\ndata(\"GM12878_HiC_10kb\")\ndata(\"IMR90_HiC_10kb\")\ndata(\"GM12878_ChIP_CTCF_signal\")\ndata(\"IMR90_ChIP_CTCF_signal\")\ndata(\"GM12878_ChIP_H3K27ac_signal\")\ndata(\"IMR90_ChIP_H3K27ac_signal\")\n\n# prepare hic data\ndata = list(GM12878_HiC_10kb,IMR90_HiC_10kb)\nfile_name = c(\"GM12878_HiC\",\"IMR90_HiC\")\nchrom = c(\"21\",\"21\")\nresolution = c(10000,10000)\n\ninput_hic <- prepareHic(data = list(GM12878_HiC_10kb,IMR90_HiC_10kb),\n                        file_name = c(\"GM12878_HiC\",\"IMR90_HiC\"),\n                        chrom = c(\"21\",\"21\"),\n                        resolution = c(10000,10000))\n# prepare data\nhic_bw <- rbind(GM12878_ChIP_CTCF_signal,IMR90_ChIP_CTCF_signal,\n                GM12878_ChIP_H3K27ac_signal,IMR90_ChIP_H3K27ac_signal)\n\nhic_bw$fileName <- rep(c(\"CTCF_signal\",\"IMR90_CTCF_signal\",\n                         \"H3K27ac_signal\",\"IMR90_H3K27ac_signal\"),\n                       c(nrow(GM12878_ChIP_CTCF_signal),nrow(IMR90_ChIP_CTCF_signal),\n                         nrow(GM12878_ChIP_H3K27ac_signal),nrow(IMR90_ChIP_H3K27ac_signal)))\n\ncolnames(hic_bw)[1] <- \"seqnames\"\n\n# gtf\ngtf <- rtracklayer::import.gff(\"test-bw2/hg19.ncbiRefSeq.gtf.gz\",format = \"gtf\") %>% \n  data.frame() "},{"path":"hic-heatmap-visualization.html","id":"basic-plot-1","chapter":"6 Hic heatmap visualization","heading":"6.2 Basic plot","text":"Let’s see bigwig track data first:Adding heatmap track:Let’s zoom heatmap see details:Removing legend:Seeing another example track right:heatmap_fill_col controls heatmap colors, use colors corresponding\nexample:Reverting heatmap:see uncomplete graphic elements beside heatmap change\ngenomic regions:Details beside heatmap. polygon positions filtered \noutside specified genomic regions:can use xlimit_range parameter zoom region:","code":"\n# plot\ntrackVisProMax(Input_bw = hic_bw %>%\n                 filter(fileName %in% c(\"CTCF_signal\",\"H3K27ac_signal\")),\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr21\",\n                                   query_start = 27995000,\n                                   query_end = 30305000),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj))\n# plot\ntrackVisProMax(Input_bw = hic_bw %>%\n                 filter(fileName %in% c(\"CTCF_signal\",\"H3K27ac_signal\")),\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr21\",\n                                   query_start = 27995000,\n                                   query_end = 30305000),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj))\n# plot\ntrackVisProMax(Input_bw = hic_bw %>%\n                 filter(fileName %in% c(\"CTCF_signal\",\"H3K27ac_signal\")),\n               Input_hic = input_hic %>% filter(fileName == \"GM12878_HiC\"),\n               Input_gtf = gtf,\n               query_region = list(query_chr = \"chr21\",\n                                   query_start = 27995000,\n                                   query_end = 30305000),\n               fixed_column_range = F,\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj),\n               sample_order = c(\"GM12878_HiC\",\"CTCF_signal\",\"H3K27ac_signal\"),\n               signal_range = list(\"chr21:27995000-30305000\" = c(CTCF_signal = 117,H3K27ac_signal = 117)),\n               signal_layer_heatmap_params = list(show.legend = F))\n# add contact heatmap\ntrackVisProMax(Input_bw = hic_bw %>% \n                 filter(fileName %in% c(\"IMR90_CTCF_signal\",\"IMR90_H3K27ac_signal\")),\n               Input_gtf = gtf,\n               Input_hic = input_hic %>% filter(fileName == \"IMR90_HiC\"),\n               query_region = list(query_chr = \"chr21\",\n                                   query_start = 27995000,\n                                   query_end = 30305000),\n               fixed_column_range = F,\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj),\n               sample_order = c(\"IMR90_HiC\",\"IMR90_CTCF_signal\",\"IMR90_H3K27ac_signal\"),\n               signal_range = list(\"chr21:27995000-30305000\" = \n                                     c(IMR90_CTCF_signal = 77,IMR90_H3K27ac_signal = 77)))\ntrackVisProMax(Input_bw = hic_bw %>% \n                 filter(fileName %in% c(\"IMR90_CTCF_signal\",\"IMR90_H3K27ac_signal\")),\n               Input_gtf = gtf,\n               Input_hic = input_hic %>% filter(fileName == \"IMR90_HiC\"),\n               query_region = list(query_chr = \"chr21\",\n                                   query_start = 27995000,\n                                   query_end = 30305000),\n               fixed_column_range = F,\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj),\n               sample_order = c(\"IMR90_HiC\",\"IMR90_CTCF_signal\",\"IMR90_H3K27ac_signal\"),\n               signal_range = list(\"chr21:27995000-30305000\" = \n                                     c(IMR90_CTCF_signal = 77,IMR90_H3K27ac_signal = 77)),\n               heatmap_fill_col = RColorBrewer::brewer.pal(n = 9, \"YlGnBu\"))\ntrackVisProMax(Input_bw = hic_bw %>% \n                 filter(fileName %in% c(\"IMR90_CTCF_signal\",\"IMR90_H3K27ac_signal\")),\n               Input_gtf = gtf,\n               Input_hic = input_hic %>% filter(fileName == \"IMR90_HiC\"),\n               query_region = list(query_chr = \"chr21\",\n                                   query_start = 27995000,\n                                   query_end = 30305000),\n               fixed_column_range = F,\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj),\n               sample_order = c(\"IMR90_CTCF_signal\",\"IMR90_HiC\",\"IMR90_H3K27ac_signal\"),\n               signal_range = list(\"chr21:27995000-30305000\" = \n                                     c(IMR90_CTCF_signal = 77,IMR90_H3K27ac_signal = 77)),\n               reverse_y_vars = c(\"IMR90_HiC\"),\n               heatmap_fill_col = RColorBrewer::brewer.pal(n = 9, \"RdYlBu\"))\ntrackVisProMax(Input_bw = hic_bw %>% \n                 filter(fileName %in% c(\"IMR90_CTCF_signal\",\"IMR90_H3K27ac_signal\")),\n               Input_gtf = gtf,\n               Input_hic = input_hic %>% filter(fileName == \"IMR90_HiC\"),\n               query_region = list(query_chr = \"chr21\",\n                                   query_start = 29500000,\n                                   query_end = 30000000),\n               fixed_column_range = F,\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj),\n               sample_order = c(\"IMR90_HiC\",\"IMR90_CTCF_signal\",\"IMR90_H3K27ac_signal\"),\n               signal_range = list(\"chr21:27995000-30305000\" = \n                                     c(IMR90_HiC = 400000,IMR90_CTCF_signal = 77,\n                                       IMR90_H3K27ac_signal = 77)),\n               heatmap_fill_col = RColorBrewer::brewer.pal(n = 9, \"YlGnBu\"))\ntrackVisProMax(Input_bw = hic_bw %>% \n                 filter(fileName %in% c(\"IMR90_CTCF_signal\",\"IMR90_H3K27ac_signal\")),\n               Input_gtf = gtf,\n               Input_hic = input_hic %>% filter(fileName == \"IMR90_HiC\"),\n               query_region = list(query_chr = \"chr21\",\n                                   query_start = 27995000,\n                                   query_end = 30305000),\n               fixed_column_range = F,\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj),\n               sample_order = c(\"IMR90_HiC\",\"IMR90_CTCF_signal\",\"IMR90_H3K27ac_signal\"),\n               signal_range = list(\"chr21:27995000-30305000\" = \n                                     c(IMR90_CTCF_signal = 77,\n                                       IMR90_H3K27ac_signal = 77)),\n               heatmap_fill_col = RColorBrewer::brewer.pal(n = 9, \"YlGnBu\"),\n               xlimit_range = c(29500000,30000000))"},{"path":"hic-heatmap-visualization.html","id":"real-data-practice","chapter":"6 Hic heatmap visualization","heading":"6.3 Real data practice","text":"Note: Using chromstart chromend extarct data specified\ngenomic region setting suitable resolution.practice public Hic data.Test data can fetched GSE200160.First extract heatmap data .hic data specified genomic region:Now plot region:Add border colors change heatmap fill colors:","code":"\n# real data\nhic_data <- list.files(\"test-bw2/\",pattern = \".hic\",full.names = T)\nhic_data\n# [1] \"test-bw2/RPE-doxorubicin_02uM.hic\"  \"test-bw2/RPE-doxorubicin_034uM.hic\"\n# [3] \"test-bw2/RPE-ICRF193_5uM.hic\"\n\nhic_df <- prepareHic(hic_path = hic_data,\n                     file_name = c(\"doxorubicin_02uM\",\"doxorubicin_34uM\",\n                                   \"ICRF193_5uM\"),\n                     chrom = \"1\",assembly = \"hg19\",\n                     chromstart = 29400000,chromend = 29500000,\n                     resolution = 10000)\n# plot\ntrackVisProMax(Input_gtf = gtf,\n               Input_hic = hic_df,\n               query_region = list(query_chr = \"chr1\",\n                                   query_start = min(hic_df$start),\n                                   query_end = max(hic_df$start)),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj))\n# plot\ntrackVisProMax(Input_gtf = gtf,\n               Input_hic = hic_df,\n               query_region = list(query_chr = \"chr1\",\n                                   query_start = min(hic_df$start),\n                                   query_end = max(hic_df$start)),\n               draw_chromosome = T,\n               draw_chromosome_params = list(ideogram_obj = hg19_obj))"},{"path":"splice-junction-visualization.html","id":"splice-junction-visualization","chapter":"7 Splice junction visualization","heading":"7 Splice junction visualization","text":"visualization tools RNA different types splice junction events.\npopular tool called sashimiplot embeded multiple splice-analysis\ntools. still convenient visualize splice data bigwig format\ndata significant differential splice sites information produced softwares.\ntrackVisProMax also allows plot RNA splice junctions data \ndata.","code":""},{"path":"splice-junction-visualization.html","id":"data-pareparation","chapter":"7 Splice junction visualization","heading":"7.1 Data pareparation","text":"use RNA-seq example data, first extract junctions bam\nfiles:Load bigwig files:","code":"\nbam_file <- list.files(path = \"F:/junc-test/\",\n                       pattern = \".bam$\",full.names = T)\nbam_file\n# [1] \"F:/junc-test/C1.sorted.bam\" \"F:/junc-test/WT.sorted.bam\"\n\njunc_df <- loadJunction(data_path = bam_file,\n                        file_name = c(\"C1\",\"WT\"))\njunc_df <- junc_df %>% dplyr::filter(score >= 5)\n\n# check\nhead(junc_df,3)\n#   seqnames   start     end score fileName\n# 1        1 3154117 3159706     1       C1\n# 2        1 3207318 3213608     1       C1\n# 3        1 4492669 4493099     8       C1\n# gtf\ngtf <- rtracklayer::import.gff(\"Mus_musculus.GRCm38.102.gtf\",format = \"gtf\") %>% \n  data.frame() \n\n# load bigwig files\nbw_file <- list.files(path = \"F:/junc-test/\",pattern = '.bw',full.names = T)\nbw_file\n# [1] \"F:/junc-test/C1.BPM.bw\" \"F:/junc-test/WT.BPM.bw\"\n\n# select some chromosomes for test\nbw <- loadBigWig(bw_file = bw_file,file_name = c(\"C1\",\"WT\"))\nbw2 <- loadBigWig(bw_file = bw_file,file_name = c(\"C1_BW\",\"WT_BW\"))"},{"path":"splice-junction-visualization.html","id":"visualization","chapter":"7 Splice junction visualization","heading":"7.2 Visualization","text":"Single gene test:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw2,\n               Input_junction = junc_df,\n               fixed_column_range = F,\n               Input_gene = c(\"Actb\"))"},{"path":"splice-junction-visualization.html","id":"section","chapter":"7 Splice junction visualization","heading":"7.3 ","text":"Note: junction curve drawn together siganal track \njunction fileName’s bigwig files junc_layer_combined\nsetted TRUE.signal_layer_junction_params signal_layer_junction_label_params control\ncurve graphics text label graphics. change linewidth \nlabel size:Drawing junctions track separately can turn curve style \nband-curve style add_band_line=TRUE. width line relatted\njunction counts means using score column:Reversing junction tracks. band_width controls curve witdth:Combining signal tracks junction tracks:","code":"\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               junc_layer_combined = T,\n               Input_junction = junc_df,\n               Input_gene = c(\"Pou5f1\",\"Gnpda2\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               junc_layer_combined = T,\n               Input_junction = junc_df,\n               Input_gene = c(\"Pou5f1\",\"Gnpda2\"),\n               signal_layer_junction_params = list(linewidth = 1),\n               signal_layer_junction_label_params = list(size = 2))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw2,\n               Input_junction = junc_df,\n               fixed_column_range = F,\n               add_band_line = T,\n               signal_range_pos = c(0.1,0.9),\n               Input_gene = c(\"Pou5f1\",\"Gnpda2\"),\n               sample_order = c(\"C1_BW\",\"C1\",\"WT_BW\",\"WT\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw2,\n               Input_junction = junc_df,\n               fixed_column_range = F,\n               add_band_line = T,\n               signal_range_pos = c(0.1,0.9),\n               Input_gene = c(\"Pou5f1\",\"Gnpda2\"),\n               sample_order = c(\"C1_BW\",\"C1\",\"WT_BW\",\"WT\"),\n               band_width = 1,\n               reverse_y_vars = c(\"C1\",\"WT\"))\ntrackVisProMax(Input_gtf = gtf,\n               Input_bw = bw,\n               junc_layer_combined = T,\n               Input_junction = junc_df,\n               signal_range_pos = c(0.1,0.9),\n               add_band_line = T,\n               Input_gene = c(\"Pou5f1\",\"Gnpda2\"))"},{"path":"other-funs.html","id":"other-funs","chapter":"8 Other funs","heading":"8 Other funs","text":"","code":""},{"path":"other-funs.html","id":"transcript-coordinate-transformation","chapter":"8 Other funs","heading":"8.1 transcript coordinate transformation","text":"Mostly draw transcript structures genomic coordinates contain intron\nsequence. Sometimes just want compare multiple transcripts gene \nremoving introns. transCoordTransform allows transform genomic coordinate\nabsolute coordinate gtf file.examples:Transforming coordinate:","code":"\nlibrary(patchwork)\n\n# gtf\nraw_gtf <- rtracklayer::import.gff(\"test-bw2/hg19.ncbiRefSeq.gtf.gz\",format = \"gtf\") %>% \n  data.frame() \n\np1 <-\ntrackVisProMax(Input_gtf = raw_gtf,\n               Input_gene = c(\"MYC\",\"NANOG\"))\n\np1\ntgene <- raw_gtf %>% filter(gene_name %in% c(\"MYC\",\"NANOG\"))\n\ntrans_gtf <- transCoordTransform(gtf_file = tgene)\n\n# check\nhead(trans_gtf[1:3,1:8])\n#   seqnames start  end width strand                source       type score\n# 1    chr12     1 2049  6660      + ncbiRefSeq.2021-05-17 transcript    NA\n# 2    chr12     1  364   364      + ncbiRefSeq.2021-05-17       exon    NA\n# 3    chr12   365  627   263      + ncbiRefSeq.2021-05-17       exon    NA\n\np2 <-\ntrackVisProMax(Input_gtf = trans_gtf,\n               Input_gene = c(\"MYC\",\"NANOG\"))\n\np2\np1/p2\np3 <- \ntrackVisProMax(Input_gtf = trans_gtf,\n               Input_gene = c(\"MYC\",\"NANOG\"),\n               trans_exon_col_params = list(mapping = aes(fill = type)))\n\np1/p2/p3"},{"path":"frequntlly-asked-questions.html","id":"frequntlly-asked-questions","chapter":"9 Frequntlly asked questions","heading":"9 Frequntlly asked questions","text":"","code":""}]
