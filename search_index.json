[["index.html", "BioSeqUtils Reference Chapter 1 About 1.1 Related blogs", " BioSeqUtils Reference Jun Zhang 2023-04-18 Chapter 1 About BioSeqUtils package supply some useful functions to do some things more efficiently which generated in my work process. I collect them in this package and share with you. If you have any question or suggestion, please leave your word on github issues. Maybe this package looks like a functions hodgepodge, anyway it at least makes you better at some aspects. Citation: Jun Zhang (2023). BioSeqUtils: Extract Sequence from Genome According to Annotation File. https://github.com/junjunlab/BioSeqUtils You can install the development version of BioSeqUtils like so: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;junjunlab/BioSeqUtils&quot;) library(BioSeqUtils) 1.1 Related blogs Some updates information will be shown on my official channel: 基因特征序列提取 R 包 BioSeqUtils About BioSeqUtils BioSeqUtils 还能再快一点? 工作中自己有用的小函数 手把手教你绘制染色体结构图 染色体绘制之温故而知新 "],["extract-sequence.html", "Chapter 2 Extract sequence 2.1 Data loading 2.2 Get features information 2.3 Extract sequnence 2.4 Get inrton information 2.5 Extract promoters 2.6 Extract non-redundant transcript length", " Chapter 2 Extract sequence The main reason for this package name BioSeqUtils is that I write some utilities to extract multiple feature sequences from annotation file, like transcript, UTR, CDS. Also it’s my experience to practice with R language. The following are examples show how to use. 2.1 Data loading First we can load gtf and genome file from local of your own using loadGenomeGTF and return a GenomeGTF object: # devtools::install_github(&quot;junjunlab/BioSeqUtils&quot;) library(BioSeqUtils) # make object mytest &lt;- loadGenomeGTF(gtfPath = &quot;hg38.ncbiRefSeq.gtf.gz&quot;, genomePath = &quot;hg38.fa.gz&quot;) ## GenomeGTF object for Extracting sequences. ## GTF file is loaded. ## genome file is loaded. ## representTrans file is NULL. ## intron slot is NULL. 2.2 Get features information getTransInfo will summarize all the gene’s transcript length information of different features. selecType controls the filtering rule, lcds mode means that sorting the CDS length and then transcript length to select the top transcript with topN parameter. lt mode means that sorting the transcript length to select the top transcript. You can get all transcript information when you set topN=0. Here are some examles: # all gene gene &lt;- unique(mytest@gtf$gene_name) # get transcript info rt &lt;- getTransInfo(object = mytest,geneName = gene, selecType = &quot;lcds&quot;,topN = 1) # check head(rt,3) # # A tibble: 3 × 11 # # Groups: gene_name, gene_id [3] # gene_name gene_id transcript_id exon CDS `3UTR` `5UTR` gtype cdsst cdsed tname # &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; # 1 A1BG A1BG NM_130786.4 3382 1485 1839 55 CD 56 1541 A1BG|A1BG|NM_130786.4|56|1541|3382|CD # 2 A1BG-AS1 A1BG-AS1 NR_015380.2 2130 0 0 0 NC 1 2130 A1BG-AS1|A1BG-AS1|NR_015380.2|1|2130|2130|NC # 3 A1CF A1CF NM_001198819.2 9481 1806 7320 352 CD 353 2159 A1CF|A1CF|NM_001198819.2|353|2159|9481|CD 2.3 Extract sequnence getFeatureFromGenome function can be used to extract multiple feature sequence which can be 5UTR, 3UTR, exon, intron. Setting the geneSeq=T to get genomic sequence. up.extend and dn.extend can extend your target sequence when you extract. longesttrans &lt;- getFeatureFromGenome(mytest,transId = rt$transcript_id[1:10],type = &quot;exon&quot;) longesttrans # DNAStringSet object of length 57285: # width seq names # [1] 3382 ATTGCTGCAGACGCTCACCCCAGACACTCACT...ATTTTGCACACTTTAAAATATTGGGTTGTTT A1BG|A1BG|NM_1307... # [2] 2130 ATTTTTAGTAGAGACGGGGTTTCGTCATGTTG...TGAAATACCTAGTGTGGTTTCTATTTCCTGA A1BG-AS1|A1BG-AS1... # [3] 9481 ATAATCAAGGAAACCTTTTCCGGGTGGGGATC...AGTGCCATTATAAAGTTTTAAAAATTATCAA A1CF|A1CF|NM_0011... # [4] 4953 GGGACCAGATGGATTGTAGGGAGTAGGGTACA...TGATGAATAAACACTTTTTCTGGTCAATGTC A2M|A2M|XM_006719... # [5] 2300 CATCAGCCCAGCCTGCAAGGAGGCGCCACCGG...GCGGCCCTCTCCAATAAATGTGTTTTTCTAT A2M-AS1|A2M-AS1|N... # ... ... ... # [57281] 8143 GGAGTCTGCGCTCTGGTTCGGGCTGCGGCTGC...TTTTTTGCCTAAATAAATGTTATAAATTTTA ZYG11B|ZYG11B|NM_... # [57282] 118 GTGTTACAAGTGAGAGGACTGTGGGAAGCCCC...TGAGAACTGCCTTCCTTCTGGACCCACGACC ZYXP1|ZYXP1|ZYXP1... # [57283] 9136 AGGAAGCCGGAAGCCGCAGGGGCCGCCGTCGT...AGAGCATGCACGAGCCCCATTTATCAGAGTC ZZEF1|ZZEF1|XM_01... # [57284] 6475 ACCTGGAAGCGCCGCGGCGCCGCTATCGAGCT...TGTGCTATATAAAACTATTTCTTATTGTGGA ZZZ3|ZZZ3|NM_0013... # [57285] 2206 GATTAGAGCCTCCCACAGGTGCTCCCCAATTT...GCCCAGTAATAAAGTTTTATGATCTTTTAAA bA255A11.4|bA255A... # output Biostrings::writeXStringSet(longesttrans,filepath = &quot;testlongest.fa&quot;,format = &quot;fasta&quot;) getFeatureFromGenome works slowly when applying to thousands of sequences. So I wrote a python script named pyExtractSeq to do the same thing which has a huge speed improvement. You can use it directly in R. The following is the comparison: # get exon sequence system.time(longesttrans &lt;- getFeatureFromGenome(mytest, transId = rt2$transcript_id[1:5000], type = &quot;exon&quot;)) # getFeatureFromGenome is running [==================================] 100% in 5m # 用户 系统 流逝 # 216.31 10.47 299.44 # using python code system.time(pyExtractSeq(gtf_file = &quot;./hg38.ncbiRefSeq.gtf&quot;, genome_file = &quot;./hg38.fa&quot;, transcript_id = rt2$transcript_id[1:5000], new_id = rt2$tname[1:5000], type = &quot;exon&quot;, out_file = &quot;output_test.fasta&quot;)) # 用户 系统 流逝 # 5.13 0.83 14.19 2.4 Get inrton information getIntronInfo allows you to get a inrton coordinate information which is similar to gtf format. # get intron info getIntronInfo(mytest,geneName = &quot;MYC&quot;) # seqnames start end width strand source # 1 chr8 127736624 127738247 1624 + ncbiRefSeq.2022-10-28 # 2 chr8 127739020 127740395 1376 + ncbiRefSeq.2022-10-28 # 3 chr8 127736624 127738250 1627 + ncbiRefSeq.2022-10-28 # 4 chr8 127739020 127740395 1376 + ncbiRefSeq.2022-10-28 # type score phase gene_id transcript_id gene_name exon_number # 1 intron NA NA MYC NM_002467.6 MYC 1 # 2 intron NA NA MYC NM_002467.6 MYC 2 # 3 intron NA NA MYC NM_001354870.1 MYC 1 # 4 intron NA NA MYC NM_001354870.1 MYC 2 # exon_id # 1 NM_002467.6.1 # 2 NM_002467.6.2 # 3 NM_001354870.1.1 # 4 NM_001354870.1.2 # define transcript_id getIntronInfo(mytest,geneName = &quot;MYC&quot;,transId = &quot;NM_002467.6&quot;) # seqnames start end width strand source # 1 chr8 127736624 127738247 1624 + ncbiRefSeq.2022-10-28 # 2 chr8 127739020 127740395 1376 + ncbiRefSeq.2022-10-28 # type score phase gene_id transcript_id gene_name exon_number # 1 intron NA NA MYC NM_002467.6 MYC 1 # 2 intron NA NA MYC NM_002467.6 MYC 2 # exon_id # 1 NM_002467.6.1 # 2 NM_002467.6.2 # define geneid getIntronInfo(mytest,geneId = &quot;MYC&quot;,transId = &quot;NM_002467.6&quot;) # seqnames start end width strand source # 1 chr8 127736624 127738247 1624 + ncbiRefSeq.2022-10-28 # 2 chr8 127739020 127740395 1376 + ncbiRefSeq.2022-10-28 # type score phase gene_id transcript_id gene_name exon_number # 1 intron NA NA MYC NM_002467.6 MYC 1 # 2 intron NA NA MYC NM_002467.6 MYC 2 # exon_id # 1 NM_002467.6.1 # 2 NM_002467.6.2 # multiple genes getIntronInfo(mytest,geneName = c(&quot;MYC&quot;,&quot;H19&quot;)) # getIntronInfo is running [=========================================] 100% in 0s # seqnames start end width strand source type score phase gene_id transcript_id # 1 chr11_ML143358v1_fix 188317 188397 81 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_002196.2 # 2 chr11_ML143358v1_fix 188521 188600 80 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_002196.2 # 3 chr11_ML143358v1_fix 188714 188808 95 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_002196.2 # 4 chr11_ML143358v1_fix 188944 189039 96 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_002196.2 # 5 chr11_ML143358v1_fix 188311 188397 87 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131223.1 # 6 chr11_ML143358v1_fix 188521 188600 80 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131223.1 # 7 chr11_ML143358v1_fix 188714 188808 95 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131223.1 # 8 chr11_ML143358v1_fix 188944 189039 96 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131223.1 # 9 chr11_ML143358v1_fix 188317 188397 81 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131224.1 # 10 chr11_ML143358v1_fix 188521 188600 80 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131224.1 # 11 chr11_ML143358v1_fix 188714 188808 95 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131224.1 # 12 chr11_ML143358v1_fix 188944 193739 4796 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131224.1 # 13 chr11 1995795 1995875 81 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_002196.2_2 # 14 chr11 1995999 1996078 80 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_002196.2_2 # 15 chr11 1996192 1996286 95 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_002196.2_2 # 16 chr11 1996422 1996517 96 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_002196.2_2 # 17 chr11 1995789 1995875 87 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131223.1_2 # 18 chr11 1995999 1996078 80 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131223.1_2 # 19 chr11 1996192 1996286 95 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131223.1_2 # 20 chr11 1996422 1996517 96 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131223.1_2 # 21 chr11 1995795 1995875 81 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131224.1_2 # 22 chr11 1995999 1996078 80 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131224.1_2 # 23 chr11 1996192 1996286 95 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131224.1_2 # 24 chr11 1996422 2001217 4796 - ncbiRefSeq.2022-10-28 intron NA NA H19 NR_131224.1_2 # 25 chr8 127736624 127738247 1624 + ncbiRefSeq.2022-10-28 intron NA NA MYC NM_002467.6 # 26 chr8 127739020 127740395 1376 + ncbiRefSeq.2022-10-28 intron NA NA MYC NM_002467.6 # 27 chr8 127736624 127738250 1627 + ncbiRefSeq.2022-10-28 intron NA NA MYC NM_001354870.1 # 28 chr8 127739020 127740395 1376 + ncbiRefSeq.2022-10-28 intron NA NA MYC NM_001354870.1 # gene_name exon_number exon_id # 1 H19 4 NR_002196.2.4 # 2 H19 3 NR_002196.2.3 # 3 H19 2 NR_002196.2.2 # 4 H19 1 NR_002196.2.1 # 5 H19 4 NR_131223.1.4 # 6 H19 3 NR_131223.1.3 # 7 H19 2 NR_131223.1.2 # 8 H19 1 NR_131223.1.1 # 9 H19 4 NR_131224.1.4 # 10 H19 3 NR_131224.1.3 # 11 H19 2 NR_131224.1.2 # 12 H19 1 NR_131224.1.1 # 13 H19 4 NR_002196.2_2.4 # 14 H19 3 NR_002196.2_2.3 # 15 H19 2 NR_002196.2_2.2 # 16 H19 1 NR_002196.2_2.1 # 17 H19 4 NR_131223.1_2.4 # 18 H19 3 NR_131223.1_2.3 # 19 H19 2 NR_131223.1_2.2 # 20 H19 1 NR_131223.1_2.1 # 21 H19 4 NR_131224.1_2.4 # 22 H19 3 NR_131224.1_2.3 # 23 H19 2 NR_131224.1_2.2 # 24 H19 1 NR_131224.1_2.1 # 25 MYC 1 NM_002467.6.1 # 26 MYC 2 NM_002467.6.2 # 27 MYC 1 NM_001354870.1.1 # 28 MYC 2 NM_001354870.1.2 # multiple transcript_ids getIntronInfo(mytest,transId = c(&quot;NR_002196.2&quot;,&quot;NM_002467.6&quot;)) # seqnames start end width strand source type # 1 chr11_ML143358v1_fix 188317 188397 81 - ncbiRefSeq.2022-10-28 intron # 2 chr11_ML143358v1_fix 188521 188600 80 - ncbiRefSeq.2022-10-28 intron # 3 chr11_ML143358v1_fix 188714 188808 95 - ncbiRefSeq.2022-10-28 intron # 4 chr11_ML143358v1_fix 188944 189039 96 - ncbiRefSeq.2022-10-28 intron # 5 chr8 127736624 127738247 1624 + ncbiRefSeq.2022-10-28 intron # 6 chr8 127739020 127740395 1376 + ncbiRefSeq.2022-10-28 intron # score phase gene_id transcript_id gene_name exon_number exon_id # 1 NA NA H19 NR_002196.2 H19 4 NR_002196.2.4 # 2 NA NA H19 NR_002196.2 H19 3 NR_002196.2.3 # 3 NA NA H19 NR_002196.2 H19 2 NR_002196.2.2 # 4 NA NA H19 NR_002196.2 H19 1 NR_002196.2.1 # 5 NA NA MYC NM_002467.6 MYC 1 NM_002467.6.1 # 6 NA NA MYC NM_002467.6 MYC 2 NM_002467.6.2 2.5 Extract promoters getPromoters allows you to extract promoter sequence for gene: # get promoters pro &lt;- getPromoters(mytest,geneName = c(&quot;AAC1&quot;,&quot;THI74&quot;)) pro # DNAStringSet object of length 2: # width seq names # [1] 2000 ATCGCGGTAAGCAGTCCCTGGAGACCATTTTAC...TAGAGGCAAAAAATAAAAAGTAAGCAGGAGAA THI74|YDR438W|YDR... # [2] 2000 CGGCTTTAAACCTGATGACGAAATTGGATTGTG...TTCTTTTCTATTTTTCCTTTTTACAGCAGTAA AAC1|YMR056C|YMR0... # same code # pro &lt;- getPromoters(mytest,geneName = c(&quot;AAC1&quot;,&quot;THI74&quot;), # up.extend = 2000, # dn.extend = 0) 2.6 Extract non-redundant transcript length As we knonw, a gene have multiple isoforms. So how should we quantify the gene expression with standard gene length. The featureCounts command from subread package is used to quantify gene expression with using non-redundant exon length. getNonRedundantLength can do the same thing: # make object mytest &lt;- loadGenomeGTF(gtfPath = &quot;hg38.ncbiRefSeq.gtf.gz&quot;) ## GenomeGTF object for Extracting sequences. ## GTF file is loaded. ## genome file is NULL. ## representTrans file is NULL. ## intron slot is NULL. # select 300 genes gene &lt;- unique(mytest@gtf$gene_name)[1:200] len &lt;- getNonRedundantLength(object = mytest,geneName = gene) # getNonRedundantLength is running [=================================] 100% in 19s # check head(len) # gene_name gene_id exonLength # 1 TRNP TRNP 68 # 2 TRNT TRNT 66 # 3 CYTB CYTB 1141 # 4 TRNE TRNE 69 # 5 ND6 ND6 525 # 6 ND5 ND5 1812 "],["draw-chromosome-ideograms.html", "Chapter 3 Draw chromosome ideograms 3.1 Downloading related data 3.2 Making plot 3.3 Drawing gene density manually", " Chapter 3 Draw chromosome ideograms A chromosomal ideogram is an idealized graphic representation of chromosomes. The common different shades of color positions on chromosome represent densities of gene. Here is a simple illustration: “gneg” refers to a chromosomal band that stains lightly with Giemsa stain. “gpos25”, “gpos50”, “gpos75”, and “gpos100” refer to chromosomal bands that stain progressively darker with Giemsa stain. These terms represent increasing proportions of GC-rich DNA in the band. “acen” refers to the centromere or the specialized region of a chromosome that plays a role in cell division. “gvar” refers to a chromosomal band that has structural variation compared to the reference genome. “stalk” can have different meanings depending on the context, but in cytogenetics, it refers to a short arm protrusion that extends from the centromere. 3.1 Downloading related data mm10, hg38 and hg19 related ideogram data have been downloaded and saved in BioSeqUtils. You can use catchIdeoData function to download other species data. Here is the data strcuture of “hg38_obj” object: data(&quot;hg38_obj&quot;) str(hg38_obj) # List of 3 # $ plot_df :&#39;data.frame&#39;: 814 obs. of 6 variables: # ..$ chr : chr [1:814] &quot;chr1&quot; &quot;chr1&quot; &quot;chr1&quot; &quot;chr1&quot; ... # ..$ chromStart : num [1:814] 0 2300000 5300000 7100000 9100000 12500000 15900000 20100000 23600000 27600000 ... # ..$ chromEnd : num [1:814] 2300000 5300000 7100000 9100000 12500000 15900000 20100000 23600000 27600000 29900000 ... # ..$ name : chr [1:814] &quot;p36.33&quot; &quot;p36.32&quot; &quot;p36.31&quot; &quot;p36.23&quot; ... # ..$ gieStain : chr [1:814] &quot;gneg&quot; &quot;gpos25&quot; &quot;gneg&quot; &quot;gpos25&quot; ... # ..$ gieStainCol: chr [1:814] &quot;white&quot; &quot;gray75&quot; &quot;white&quot; &quot;gray75&quot; ... # $ border_df : gropd_df [48 × 4] (S3: grouped_df/tbl_df/tbl/data.frame) # ..$ chr : chr [1:48] &quot;chr1&quot; &quot;chr1&quot; &quot;chr10&quot; &quot;chr10&quot; ... # ..$ pos : chr [1:48] &quot;left&quot; &quot;right&quot; &quot;left&quot; &quot;right&quot; ... # ..$ xmin: num [1:48] 0.00 1.25e+08 0.00 4.16e+07 0.00 ... # ..$ xmax: num [1:48] 1.22e+08 2.49e+08 3.80e+07 1.34e+08 5.10e+07 ... # ..- attr(*, &quot;groups&quot;)= tibble [24 × 2] (S3: tbl_df/tbl/data.frame) # .. ..$ chr : chr [1:24] &quot;chr1&quot; &quot;chr10&quot; &quot;chr11&quot; &quot;chr12&quot; ... # .. ..$ .rows: list&lt;int&gt; [1:24] # .. .. ..$ : int [1:2] 1 2 # .. .. ..$ : int [1:2] 3 4 # ... # .. .. ..@ ptype: int(0) # .. ..- attr(*, &quot;.drop&quot;)= logi TRUE # $ acen_plot_df:&#39;data.frame&#39;: 96000 obs. of 4 variables: # ..$ xpos: num [1:96000] 1.25e+08 1.25e+08 1.25e+08 1.25e+08 1.25e+08 ... # ..$ ypos: num [1:96000] 0 0.00025 0.000501 0.000751 0.001002 ... # ..$ type: num [1:96000] 1 1 1 1 1 1 1 1 1 1 ... # ..$ chr : chr [1:96000] &quot;chr1&quot; &quot;chr1&quot; &quot;chr1&quot; &quot;chr1&quot; ... If we download “mm10” related ideogram data online: mm10_obj &lt;- catchIdeoData(genome = &quot;mm10&quot;) 3.2 Making plot drawChromosome function allows you to plot chromosome ideogram structure: drawChromosome(ideogram_obj = hg38_obj, chromosomes = unique(hg38_obj$plot_df$chr), facet_params = list(scales = &quot;fixed&quot;)) Selecting some chromosomes: drawChromosome(ideogram_obj = hg38_obj, chromosomes = c(&quot;chr1&quot;,&quot;chr2&quot;,&quot;chr3&quot;)) Zooming a region on chromosomes with a genomic position: drawChromosome(ideogram_obj = hg38_obj, chromosomes = c(&quot;chr1&quot;,&quot;chr2&quot;,&quot;chr3&quot;), zoom_region = c(10^8,10^8+300000)) Multiple regions are also accepted: data(&quot;mm10_obj&quot;) drawChromosome(ideogram_obj = mm10_obj, chromosomes = c(&quot;chr1&quot;,&quot;chr2&quot;,&quot;chr3&quot;), zoom_region = list(chr1 = c(10^8,10^8+300000), chr2 = c(0.6*10^8 + 300000,0.6*10^8+900000), chr3 = c(0.1*10^8,0.1*10^8+450000)), facet_params = list(strip.position = &quot;bottom&quot;), zoom_col = c(&quot;white&quot;,&quot;#82CD47&quot;)) 3.3 Drawing gene density manually If you want to calculate and plot gene densities by manual, please refer to 手把手教你绘制染色体结构图. "],["track-data-input.html", "Chapter 4 Track data input 4.1 Load signal data 4.2 Load peaks data 4.3 Load links data 4.4 Load Hic related data 4.5 Extract junction data", " Chapter 4 Track data input There are many tools or softwares to visualize NGS(Next Generation Sequencing) data including ChIP-SEQ, ATAC-SEQ, RNA-SEQ, Hic, HiChIP and so on. The R packages Gviz, plotgardener, ggcoverage and ggbio are some popular tools to visualize NGS data in R. Besides, the online or local softwares like IGV, Wubrowse and ucsc genome browser. There are still some limitations for some of them to make a High-Quality Graphics for Publication with less code and less time. Here I supply some utilities and functions totally based on ggplot2 package to visualize NGS data in R and create a nice graph with high-quality for publication. Though I have written a similar package transPlotR which plays some same roles on generating tracks plot. Some limitations and shortcomings come to me when I use this package. So I devote myself again to develop and expand the functions. The main plot function is trackVisProMax function and this is combined with some data load input functions for create a track graph. 4.1 Load signal data bigwig format is binary of wig which’s data size is samller. I recommend use this format, “wig” and “bedGraph” format are also accepted, you should just define format parameter. loadBigWig function can read bigwig data into R which based on rtracklayer::import.bw. Here are some examples to load your bigwig data: library(BioSeqUtils) # load bigwig files file &lt;- list.files(path = &quot;test-bw/&quot;,pattern = &#39;.bw&#39;,full.names = T) file # [1] &quot;test-bw/1cell-m6A-1.bw&quot; &quot;test-bw/1cell-m6A-2.bw&quot; &quot;test-bw/1cell-RNA-1.bw&quot; # [4] &quot;test-bw/1cell-RNA-2.bw&quot; &quot;test-bw/2cell-m6A-1.bw&quot; &quot;test-bw/2cell-m6A-2.bw&quot; # [7] &quot;test-bw/2cell-RNA-1.bw&quot; &quot;test-bw/2cell-RNA-2.bw&quot; # select some chromosomes for test bw &lt;- loadBigWig(bw_file = file,chrom = c(&quot;5&quot;,&quot;15&quot;),format = &quot;bw&quot;) # check head(bw,3) # seqnames start end score fileName # 1 15 1 3054635 0.00000 1cell-m6A-1 # 2 15 3054636 3054640 1.34079 1cell-m6A-1 # 3 15 3054641 3054715 2.68159 1cell-m6A-1 For saving space, we selected chromosome 5 and chromosome 15 for each file, if you don’t specify chrom parameter, loadBigWig will return all chromosomes. You can also specify file_name to assign a new name for your each bigwig data. 4.2 Load peaks data loadBed function allows you to read peaks data in R which ias baesd on rtracklayer::import.bed. Usually we will select the first three columns for downstream analysis. You can also specify file_name to assign a new name for your each bed data. Here is a example to read peaks data: bedfile &lt;- list.files(path = &quot;./&quot;,pattern = &quot;.bed&quot;) # [1] &quot;peaks.bed&quot; &quot;peaks2.bed&quot; bed_df &lt;- loadBed(bedfile) # check head(bed_df,3) # seqnames start end sampleName y # 1 5 142905501 142905600 peaks 1 # 2 5 142903201 142903800 peaks 1 # 3 15 61985342 61985900 peaks 1 4.3 Load links data Links data often describe two interaction sites on genomic positions. Hic and HiChIP technologies can achive this goal. The data format can be bed and bedpe format. Or you can supply with only 4 columns(chrom, start, end, value) format data. loadloops function allows you to read these format data in R. Example shows in the following code: Note: You should supply file_name for each file. loop_file &lt;- list.files(&quot;test-bw2/&quot;,pattern = &quot;.bedpe$&quot;,full.names = T) loop_file # [1] &quot;test-bw2/C1-CTCF.bedpe&quot; &quot;test-bw2/C1-H3K27ac.bedpe&quot; &quot;test-bw2/M1-CTCF.bedpe&quot; # [4] &quot;test-bw2/M1-H3K27ac.bedpe&quot; file_name = c(&quot;C1-CTCF&quot;,&quot;C1-H3K27ac&quot;,&quot;M1-CTCF&quot;,&quot;M1-H3K27ac&quot;) # test code loop_data &lt;- loadloops(loop_file = loop_file,file_name = file_name, sep = &quot; &quot;) # check head(loop_data,3) # seqnames start end score fileName # 1 chr10 100002774 100022436 0.021354 C1-CTCF # 2 chr10 100002774 100069170 0.068404 C1-CTCF # 3 chr10 100002774 100185646 0.184670 C1-CTCF 4.4 Load Hic related data The Hic related data format is multiple includes .h5, .hic, .cool, .mcool and so on. It mainly depends on what kind of soft/tool in the upstream. The usual format is .hic and .cool. So we foucus on these fromat for visualization. You can use hicConvertFormat command in HiCExplorer software to covert into suitable format if you have other format file. Different upstream tools will generate different resolution matrix data, please make sure what resolution the Hic data you are using. For .hic data, you can use strawr::readHicBpResolutions function to check avaliable resolutions to use, examples shows here: # install.packages(&quot;strawr&quot;) library(strawr) # test data readHicBpResolutions(system.file(&quot;extdata&quot;, &quot;test.hic&quot;, package = &quot;strawr&quot;)) # [1] 2500000 # real data readHicBpResolutions(&quot;test-bw2/RPE-ICRF193_5uM.hic&quot;) # [1] 2500000 1000000 500000 250000 100000 50000 25000 10000 5000 readHicChroms function can be used to vies chromosome names for your data: # test data readHicChroms(system.file(&quot;extdata&quot;, &quot;test.hic&quot;, package = &quot;strawr&quot;)) %&gt;% head() # name length # 1 1 249250621 # 2 10 135534747 # 3 11 135006516 # 4 12 133851895 # 5 13 115169878 # 6 14 107349540 # real data readHicChroms(&quot;test-bw2/RPE-ICRF193_5uM.hic&quot;) %&gt;% head() # name length # 1 1 249250621 # 2 10 135534747 # 3 11 135006516 # 4 12 133851895 # 5 13 115169878 # 6 14 107349540 prepareHic function allows you to read .hic and .cool data. Usually these data are big size and will spend a lot of space and memory. Please making sure you have enough soures to deal with it. Here are some eamples: Test data can be fetched on GSE200160. For .hic data, we use plotgardener::readHic function to read data into R and it is has been upper-triangle matrix format. hic_data &lt;- list.files(&quot;test-bw2/&quot;,pattern = &quot;.hic&quot;,full.names = T) hic_data # [1] &quot;test-bw2/RPE-doxorubicin_02uM.hic&quot; &quot;test-bw2/RPE-doxorubicin_034uM.hic&quot; # [3] &quot;test-bw2/RPE-ICRF193_5uM.hic&quot; hic_df &lt;- prepareHic(hic_path = hic_data, file_name = c(&quot;doxorubicin_02uM&quot;,&quot;doxorubicin_34uM&quot;, &quot;ICRF193_5uM&quot;), chrom = &quot;1&quot;,assembly = &quot;hg19&quot;, resolution = 10000) # check head(hic_df[1:3,]) # seqnames start end score fileName id # 1 chr1 710000 5000 72.90664 doxorubicin_02uM 1 # 2 chr1 715000 0 323.53738 doxorubicin_02uM 2 # 3 chr1 715000 10000 212.93642 doxorubicin_02uM 3 You can extract multiple chromosomes for multiple data: hic_df &lt;- prepareHic(hic_path = hic_data, file_name = c(&quot;doxorubicin_02uM&quot;,&quot;doxorubicin_34uM&quot;, &quot;ICRF193_5uM&quot;), chrom = c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;),assembly = &quot;hg19&quot;, resolution = 10000) # check head(hic_df[1:3,]) # seqnames start end score fileName id # 1 chr1 710000 5000 72.90664 doxorubicin_02uM 1 # 2 chr1 715000 0 323.53738 doxorubicin_02uM 2 # 3 chr1 715000 10000 212.93642 doxorubicin_02uM 3 Besides, you can define a region to extract: hic_df &lt;- prepareHic(hic_path = hic_data, file_name = c(&quot;doxorubicin_02uM&quot;,&quot;doxorubicin_34uM&quot;, &quot;ICRF193_5uM&quot;), chrom = &quot;1&quot;,assembly = &quot;hg19&quot;, chromstart = 20000000, chromend = 47500000, resolution = 10000) # check head(hic_df[1:3,]) # seqnames start end score fileName id # 1 chr1 19995000 0 96.48324 doxorubicin_02uM 1 # 2 chr1 20000000 5000 38.00954 doxorubicin_02uM 2 # 3 chr1 20005000 0 102.91180 doxorubicin_02uM 3 Test data can be fetched on GSE222637. For .cool data format, prepareHic runs slowly and spend much memory: hic_data &lt;- list.files(&quot;test-bw3/&quot;,pattern = &quot;.cool&quot;,full.names = T) hic_data # [1] &quot;test-bw3/HiC_Adril-1_10kb.cool&quot; &quot;test-bw3/HiC_Ctrl-1_10kb.cool&quot; hic_df &lt;- prepareHic(hic_path = hic_data, chrom = &quot;chr1&quot;, resolution = 10000) # check head(hic_df,3) # seqnames start end score fileName id # 1 chr1 -5000 0 4 HiC_Adril-1_10kb 1 # 2 chr1 80000 85000 1 HiC_Adril-1_10kb 2 # 3 chr1 59660000 59665000 1 HiC_Adril-1_10kb 3 4.5 Extract junction data loadJunction can be used to load junctions data from your own bed format data which records differential splice sites information from other tools identified or from your bam file. The latter we use megadepth::bam_to_junctions to extract all junctions data and return a data frame format. More details see megadepth. Here we show examples: bam_file &lt;- list.files(path = &quot;F:/junc-test/&quot;, pattern = &quot;.bam$&quot;,full.names = T) bam_file # [1] &quot;F:/junc-test/C1.sorted.bam&quot; &quot;F:/junc-test/WT.sorted.bam&quot; junc_df &lt;- loadJunction(data_path = bam_file, file_name = c(&quot;C1&quot;,&quot;WT&quot;)) junc_df &lt;- junc_df %&gt;% dplyr::filter(score &gt;= 5) # check head(junc_df,3) # seqnames start end score fileName # 1 1 3154117 3159706 1 C1 # 2 1 3207318 3213608 1 C1 # 3 1 4492669 4493099 8 C1 The score stands for read count of junctions. A little time you will spend if you extarct all junctions site from bam files. I recommend you featch the significant junction sites information from other softwares for visualization. "],["basic-visualization.html", "Chapter 5 Basic visualization 5.1 Basic plot 5.2 Signal range settings 5.3 Transcript track settings 5.4 X axis limitation 5.5 Background and highlight region settings 5.6 Order for genes and samples 5.7 Adding group information for genes and samples 5.8 Strip settings 5.9 Draw chromosome annotation 5.10 Plot with specified genomic region 5.11 Adding peaks track", " Chapter 5 Basic visualization There are multiple chapters to illustrate how to use trackVisProMax draw basic tracks. Raw fastqs can be fetched CRA003985, You need download them and map to genome and convert bam files to bigwig format. First we load test data into R: library(ggplot2) library(BioSeqUtils) # load bigwig files file &lt;- list.files(path = &quot;test-bw/&quot;,pattern = &#39;.bw&#39;,full.names = T) file # [1] &quot;test-bw/1cell-m6A-1.bw&quot; &quot;test-bw/1cell-m6A-2.bw&quot; &quot;test-bw/1cell-RNA-1.bw&quot; # [4] &quot;test-bw/1cell-RNA-2.bw&quot; &quot;test-bw/2cell-m6A-1.bw&quot; &quot;test-bw/2cell-m6A-2.bw&quot; # [7] &quot;test-bw/2cell-RNA-1.bw&quot; &quot;test-bw/2cell-RNA-2.bw&quot; # select some chromosomes for test bw &lt;- loadBigWig(file,chrom = c(&quot;5&quot;,&quot;15&quot;)) # check head(bw,3) # seqnames start end score fileName # 1 15 1 3054635 0.00000 1cell-m6A-1 # 2 15 3054636 3054640 1.34079 1cell-m6A-1 # 3 15 3054641 3054715 2.68159 1cell-m6A-1 # gtf gtf &lt;- rtracklayer::import.gff(&quot;Mus_musculus.GRCm38.102.gtf&quot;,format = &quot;gtf&quot;) %&gt;% data.frame() 5.1 Basic plot Plot with given one gene symbol (make sure the gene_name column in your annotation file): trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;)) Plot multiple genes at the same time: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;,&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;)) Change track colors with color vectors: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;), sample_fill_col = c(rep(c(&quot;red&quot;,&quot;red&quot;,&quot;grey50&quot;,&quot;grey50&quot;),3))) Or you can give a named vector to assign colors for each track: trmycol &lt;- c(&quot;1cell-m6A-1&quot; = &quot;orange&quot;, &quot;1cell-m6A-2&quot; = &quot;orange&quot;, &quot;1cell-RNA-1&quot; = &quot;green&quot;, &quot;1cell-RNA-2&quot; = &quot;green&quot;, &quot;2cell-m6A-1&quot; = &quot;blue&quot;, &quot;2cell-m6A-2&quot; = &quot;blue&quot;, &quot;2cell-RNA-1&quot; = &quot;pink&quot;, &quot;2cell-RNA-2&quot; = &quot;pink&quot;) trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;), sample_fill_col = mycol) Adding genomic region label: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;,&quot;Dnaaf5&quot;,&quot;Zfp68&quot;), add_gene_region_label = T) Adding legend: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;,&quot;Dnaaf5&quot;,&quot;Zfp68&quot;), add_gene_region_label = T, signal_layer_bw_params = list(show.legend = T)) 5.2 Signal range settings signal_range_pos can be used to change the y axis limitation range label position: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;,&quot;Dnaaf5&quot;), signal_range_pos = c(0.1,0.85)) signal_range_label_params can be used to change the y label styles: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;,&quot;Dnaaf5&quot;), signal_range_pos = c(0.1,0.85), signal_range_label_params = list(size = 2,color = &quot;red&quot;)) As you can see, the signal range is same by each column panel, you can set fixed_column_range = F to make free scales for each panel: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;,&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), fixed_column_range = F) Giving a named list with named vectors to control signal range for each panel: sample &lt;- c(&quot;1cell-m6A-1&quot;,&quot;1cell-m6A-2&quot;,&quot;1cell-RNA-1&quot;,&quot;1cell-RNA-2&quot;, &quot;2cell-m6A-1&quot;,&quot;2cell-m6A-2&quot;,&quot;2cell-RNA-1&quot;,&quot;2cell-RNA-2&quot;) Kmt2d_rg &lt;- c(rep(4000,2),rep(8000,2),rep(4000,4)) names(Kmt2d_rg) &lt;- sample Kmt2d_rg # 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 # 4000 4000 8000 8000 4000 4000 4000 4000 Dnaaf5_rg &lt;- c(rep(1000,2),rep(5000,2),rep(2000,4)) names(Dnaaf5_rg) &lt;- sample Dnaaf5_rg # 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 # 1000 1000 5000 5000 2000 2000 2000 2000 trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;,&quot;Dnaaf5&quot;), signal_range = list(Kmt2d = Kmt2d_rg, Dnaaf5 = Dnaaf5_rg)) You can even set a range for a specified panel: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Kmt2d&quot;,&quot;Dnaaf5&quot;), signal_range = list(Kmt2d = c(&quot;1cell-m6A-1&quot; = 8000), Dnaaf5 = c(&quot;1cell-m6A-1&quot; = 1000))) Containing negative values in signal file is also supported. Here we set the score range in (-500,500) and plot: # load bigwig files file &lt;- list.files(path = &quot;test-bw/&quot;,pattern = &#39;.bw&#39;,full.names = T)[1:4] file # [1] &quot;test-bw/1cell-m6A-1.bw&quot; &quot;test-bw/1cell-m6A-2.bw&quot; # &quot;test-bw/1cell-RNA-1.bw&quot; &quot;test-bw/1cell-RNA-2.bw&quot; # select some chromosomes for test bw &lt;- loadBigWig(file,chrom = c(&quot;5&quot;,&quot;15&quot;)) bw$score &lt;- sample(seq(-500,500,0.5),size = nrow(bw),replace = T) # gtf gtf &lt;- rtracklayer::import.gff(&quot;Mus_musculus.GRCm38.102.gtf&quot;,format = &quot;gtf&quot;) %&gt;% data.frame() trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Utp3&quot;,&quot;Chpf2&quot;)) If you want to control the minimum value and maximum value for each panel, you can give a named list with 2 element vectors in a named list for signal_range parameter, here we show an example: trackVisProMax(Input_gtf = gtf, Input_bw = bw, signal_range = list(Utp3 = list(&quot;1cell-m6A-1&quot; = c(-1000,1000), &quot;1cell-m6A-2&quot; = c(0,1000), &quot;1cell-RNA-1&quot; = c(-1000,1000), &quot;1cell-RNA-2&quot; = c(-1000,0)), Chpf2 = c(&quot;1cell-m6A-1&quot; = 1000, &quot;1cell-RNA-2&quot; = 500)), Input_gene = c(&quot;Utp3&quot;,&quot;Chpf2&quot;)) 5.3 Transcript track settings Here we illustrate some related parameters to draw the transcript track. trans_topN is used to control how many transcripts for a gene to be drawn in the track. The default is to show top 2 longest transcripts according to their transcipt exon length. You can change it with other values: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), trans_topN = 1) Showing top 5 transcripts: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), trans_topN = 5) collapse_trans parameter allows you to collapse all transcripts you have shown in the trans track: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), trans_topN = 5, collapse_trans = T) Setting trans_topN = “all” which can show all transcripts for a gene: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), trans_topN = &quot;all&quot;) You can also collapse the transcripts: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), trans_topN = &quot;all&quot;, collapse_trans = T) rel_len control the arrow densities on transcript, you can check createSegment function for details. arrow_rel_len_params_list accepts a list parameters to control how the arrows be generated. rel_len smaller, the more arrows be generated: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), arrow_rel_len_params_list = list(rel_len = 0.2)) More controls for arrows: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), arrow_rel_len_params_list = list(rel_len = 0.15), trans_exon_arrow_params = list(fill = &quot;red&quot;,color = &quot;red&quot;, linewidth = 1)) Changing arrow styles: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), arrow_rel_len_params_list = list(rel_len = 0.15), trans_exon_arrow_params = list(arrow = arrow(type = &quot;open&quot;, length = unit(3,&quot;mm&quot;)))) Changing arrow colors: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), trans_exon_col_params = list(fill = &quot;black&quot;,color = &quot;black&quot;)) add_gene_label_layer allows you to mark gene symbols beside the transcript: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), collapse_trans = T, add_gene_label_layer = T, gene_label_shift_y = -0.5) exon_width allows you to change exon width: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), exon_width = 0.9) gene_dist_mark_params and gene_dist_mark_text_params control the segment (arrow direction stands for transciption direction) and chromosome label styles upper the transcript: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;), gene_dist_mark_params = list(color = &quot;blue&quot;,size = 1), gene_dist_mark_text_params = list(color = &quot;red&quot;,size = 2)) Viewing transcript structures for gene if you do not supply with any signal data (bigwig,peaks …): trackVisProMax(Input_gtf = gtf, Input_gene = c(&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;)) Showing all transcripts: trackVisProMax(Input_gtf = gtf, Input_gene = c(&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), trans_topN = &quot;all&quot;) Collapsing all transcripts: trackVisProMax(Input_gtf = gtf, Input_gene = c(&quot;Dnaaf5&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), trans_topN = &quot;all&quot;, collapse_trans = T) Plotting in a genomic region: trackVisProMax(Input_gtf = gtf, query_region = list(query_chr = c(&quot;5&quot;,&quot;15&quot;), query_start = c(65438603,9263295), query_end = c(65834288,9785835))) Showing all transcripts: trackVisProMax(Input_gtf = gtf, query_region = list(query_chr = c(&quot;5&quot;,&quot;15&quot;), query_start = c(65438603,9263295), query_end = c(65834288,9785835)), trans_topN = &quot;all&quot;) You can also map the exon color into different feature types: # gtf raw_gtf &lt;- rtracklayer::import.gff(&quot;test-bw2/hg19.ncbiRefSeq.gtf.gz&quot;,format = &quot;gtf&quot;) %&gt;% data.frame() trackVisProMax(Input_gtf = raw_gtf, Input_gene = c(&quot;MYC&quot;,&quot;NANOG&quot;,&quot;MALAT1&quot;), trans_topN = &quot;all&quot;, trans_exon_col_params = list(mapping = aes(fill = type))) trans_fill_col accepts a character vectors or named vectors to control exon fill colors: trackVisProMax(Input_gtf = raw_gtf, Input_gene = c(&quot;MYC&quot;,&quot;NANOG&quot;,&quot;MALAT1&quot;), trans_topN = &quot;all&quot;, trans_exon_col_params = list(mapping = aes(fill = type)), trans_fill_col = ggsci::pal_igv()(6)) Removing the legend: trackVisProMax(Input_gtf = raw_gtf, Input_gene = c(&quot;MYC&quot;,&quot;NANOG&quot;,&quot;MALAT1&quot;), trans_topN = &quot;all&quot;, trans_exon_col_params = list(mapping = aes(fill = type), show.legend = F), trans_fill_col = ggsci::pal_locuszoom()(6)) 5.4 X axis limitation Basiclly trackVisProMax is constructed based on the ggplot. But you can’t directlly use ggplot2::xlim function to adjust the X axis limitation. xlimit_range parameter is supplied to control the X axis limits which can zoom your interested region: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;), xlimit_range = list(c(142904344,142904782), c(61987507,61988278))) 5.5 Background and highlight region settings Maybe you need to highlight some regions where you are interested in or set background color for each track to enhance the track visualization or for other purpose. Let’s show some examples with this goal. background_color_region accepts a named list with named vectors to control the background colors for each panel: sample &lt;- c(&quot;1cell-m6A-1&quot;,&quot;1cell-m6A-2&quot;,&quot;1cell-RNA-1&quot;,&quot;1cell-RNA-2&quot;, &quot;2cell-m6A-1&quot;,&quot;2cell-m6A-2&quot;,&quot;2cell-RNA-1&quot;,&quot;2cell-RNA-2&quot;) Actb_col &lt;- rep(ggsci::pal_npg()(4),each = 2) names(Actb_col) &lt;- sample Actb_col # 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 # &quot;#E64B35FF&quot; &quot;#E64B35FF&quot; &quot;#4DBBD5FF&quot; &quot;#4DBBD5FF&quot; &quot;#00A087FF&quot; &quot;#00A087FF&quot; &quot;#3C5488FF&quot; &quot;#3C5488FF&quot; Myc_col &lt;- rep(ggsci::pal_d3()(4),each = 2) names(Myc_col) &lt;- sample Myc_col # 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 # &quot;#1F77B4FF&quot; &quot;#1F77B4FF&quot; &quot;#FF7F0EFF&quot; &quot;#FF7F0EFF&quot; &quot;#2CA02CFF&quot; &quot;#2CA02CFF&quot; &quot;#D62728FF&quot; &quot;#D62728FF&quot; Mtdh_col &lt;- rep(ggsci::pal_lancet()(4),each = 2) names(Mtdh_col) &lt;- sample Mtdh_col # 1cell-m6A-1 1cell-m6A-2 1cell-RNA-1 1cell-RNA-2 2cell-m6A-1 2cell-m6A-2 2cell-RNA-1 2cell-RNA-2 # &quot;#00468BFF&quot; &quot;#00468BFF&quot; &quot;#ED0000FF&quot; &quot;#ED0000FF&quot; &quot;#42B540FF&quot; &quot;#42B540FF&quot; &quot;#0099B4FF&quot; &quot;#0099B4FF&quot; trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), background_color_region = list(Actb = Actb_col, Myc = Myc_col, Mtdh = Mtdh_col)) You can also set a background color for a specified panel: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), background_color_region = list(Myc = Myc_col)) background_region_alpha controls the color transparency: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), background_color_region = list(Actb = Actb_col, Myc = Myc_col, Mtdh = Mtdh_col), background_region_alpha = 0.75) higlight_region accepts a named list genomic coordinates where you want to highlight. higlight_col also accepts a named list to control the highlighted region colors: higlight_region &lt;- list(Actb = list(start = c(142904000), end = c(142904500)), Myc = list(start = c(61986000,61989500), end = c(61986500,61989900))) higlight_col &lt;- list(Actb = c(&quot;pink&quot;), Myc = c(&quot;orange&quot;,&quot;green&quot;)) trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), higlight_region = higlight_region, higlight_col = higlight_col) higlight_col_alpha controls the color transparency: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), higlight_region = higlight_region, higlight_col = higlight_col, higlight_col_alpha = 0.5) 5.6 Order for genes and samples Probably you will re-order your gene or sample orders in the graph. Generally speaking, whether the gene orders or sample orders, their orders initially have been assigned according to their input orders. You just need to adjust the input orders. Even so, I also supply gene_order and sample_order extra parameters to re-order the genes and samples: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), gene_order = c(&quot;Mtdh&quot;,&quot;Myc&quot;,&quot;Actb&quot;)) Changing sample orders: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), gene_order = c(&quot;Mtdh&quot;,&quot;Myc&quot;,&quot;Actb&quot;), sample_order = rev(sample)) 5.7 Adding group information for genes and samples Grouping the genes and samples can clarify author’s experiment design in different conditions or treatment. So drawing group graphic elements for multiple genes or samples stands for what the author want to express. A picture is worth a thousand words. gene_group_info, gene_group_info2,sample_group_info and sample_group_info2 accepts a named list with vectors to add group information. You can add two group information for genes and samples at most which is enough for us. The following codes show how we add group information and modify graphic attributes. trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), gene_group_info = list(cluster1 = c(&quot;Actb&quot;,&quot;Myc&quot;), cluster2 = c(&quot;Mtdh&quot;,&quot;Adamts3&quot;), cluster3 = c(&quot;Zfp68&quot;,&quot;Pabpc1&quot;))) Adding sample group information: Note: panel.spacing is used to add spacing between each panel along the Y axis which can show the line gaps between different sample group. trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), gene_group_info = list(cluster1 = c(&quot;Actb&quot;,&quot;Myc&quot;), cluster2 = c(&quot;Mtdh&quot;,&quot;Adamts3&quot;), cluster3 = c(&quot;Zfp68&quot;,&quot;Pabpc1&quot;)), sample_group_info = list(&quot;input&quot; = c(&quot;1cell-RNA-1&quot;, &quot;1cell-RNA-2&quot;, &quot;2cell-RNA-1&quot;, &quot;2cell-RNA-2&quot;), &quot;treat&quot; = c(&quot;1cell-m6A-1&quot;, &quot;1cell-m6A-2&quot;, &quot;2cell-m6A-1&quot;, &quot;2cell-m6A-2&quot;)), panel.spacing = c(0.2,0.2)) Adding one more group: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), gene_group_info = list(cluster1 = c(&quot;Actb&quot;,&quot;Myc&quot;), cluster2 = c(&quot;Mtdh&quot;,&quot;Adamts3&quot;), cluster3 = c(&quot;Zfp68&quot;,&quot;Pabpc1&quot;)), gene_group_info2 = list(geneGroup1 = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), geneGroup2 = c(&quot;Adamts3&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;)), sample_group_info = list(&quot;input&quot; = c(&quot;1cell-RNA-1&quot;, &quot;1cell-RNA-2&quot;, &quot;2cell-RNA-1&quot;, &quot;2cell-RNA-2&quot;), &quot;treat&quot; = c(&quot;1cell-m6A-1&quot;, &quot;1cell-m6A-2&quot;, &quot;2cell-m6A-1&quot;, &quot;2cell-m6A-2&quot;)), sample_group_info2 = list(&quot;cellState1&quot; = c(&quot;1cell-RNA-1&quot;, &quot;1cell-RNA-2&quot;, &quot;1cell-m6A-1&quot;, &quot;1cell-m6A-2&quot;), &quot;cellState2&quot; = c(&quot;2cell-RNA-1&quot;, &quot;2cell-RNA-2&quot;, &quot;2cell-m6A-1&quot;, &quot;2cell-m6A-2&quot;)), panel.spacing = c(0.2,0.2)) gene_group_info_order, gene_group_info2_order,sample_group_info_order and sample_group_info2_order separatelly control each group orders: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), gene_group_info = list(cluster1 = c(&quot;Actb&quot;,&quot;Myc&quot;), cluster2 = c(&quot;Mtdh&quot;,&quot;Adamts3&quot;), cluster3 = c(&quot;Zfp68&quot;,&quot;Pabpc1&quot;)), gene_group_info_order = c(&quot;cluster3&quot;,&quot;cluster2&quot;,&quot;cluster1&quot;), gene_group_info2 = list(geneGroup1 = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), geneGroup2 = c(&quot;Adamts3&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;)), gene_group_info2_order = c(&quot;geneGroup2&quot;,&quot;geneGroup1&quot;), sample_group_info = list(&quot;input&quot; = c(&quot;1cell-RNA-1&quot;, &quot;1cell-RNA-2&quot;, &quot;2cell-RNA-1&quot;, &quot;2cell-RNA-2&quot;), &quot;treat&quot; = c(&quot;1cell-m6A-1&quot;, &quot;1cell-m6A-2&quot;, &quot;2cell-m6A-1&quot;, &quot;2cell-m6A-2&quot;)), sample_group_info_order = c(&quot;treat&quot;,&quot;input&quot;), sample_group_info2 = list(&quot;cellState1&quot; = c(&quot;1cell-RNA-1&quot;, &quot;1cell-RNA-2&quot;, &quot;1cell-m6A-1&quot;, &quot;1cell-m6A-2&quot;), &quot;cellState2&quot; = c(&quot;2cell-RNA-1&quot;, &quot;2cell-RNA-2&quot;, &quot;2cell-m6A-1&quot;, &quot;2cell-m6A-2&quot;)), sample_group_info2_order = c(&quot;cellState2&quot;,&quot;cellState1&quot;), panel.spacing = c(0.2,0.2)) 5.8 Strip settings This chapter shows us how to modify each strip graphic element instead of using lines to separate group. column_strip_setting_list and row_strip_setting_list accept a named list to modify the strip element_rect element by columns or rows: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), column_strip_setting_list = list(color = rep(&quot;red&quot;,3), fill = rep(&quot;grey80&quot;,3)), row_strip_setting_list = list(color = rep(&quot;black&quot;,8), fill = rep(c(&quot;orange&quot;,&quot;purple&quot;),each = c(2,2), times = 2))) column_strip_text_setting_list and row_strip_text_setting_list accept a named list to modify the strip element_text element by columns or rows: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), column_strip_setting_list = list(color = rep(&quot;red&quot;,3), fill = rep(&quot;grey80&quot;,3)), column_strip_text_setting_list = list(color = &quot;darkred&quot;,size = 8, fontface = &quot;bold&quot;), row_strip_setting_list = list(color = rep(&quot;black&quot;,8), fill = rep(c(&quot;orange&quot;,&quot;purple&quot;),each = c(2,2), times = 2)), row_strip_text_setting_list = list(fontface = &quot;italic.bold&quot;,color = &quot;white&quot;)) by_layer_x and by_layer_y can be setted to TRUE and you can modify the graphic element by row or column: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;), gene_group_info = list(cluster1 = c(&quot;Actb&quot;,&quot;Myc&quot;), cluster2 = c(&quot;Mtdh&quot;,&quot;Adamts3&quot;), cluster3 = c(&quot;Zfp68&quot;,&quot;Pabpc1&quot;)), gene_group_info2 = list(geneGroup1 = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;), geneGroup2 = c(&quot;Adamts3&quot;,&quot;Zfp68&quot;,&quot;Pabpc1&quot;)), by_layer_x = T, column_strip_setting_list = list(fill = c(&quot;grey80&quot;,&quot;blue&quot;,&quot;green&quot;)), sample_group_info = list(&quot;input&quot; = c(&quot;1cell-RNA-1&quot;, &quot;1cell-RNA-2&quot;, &quot;2cell-RNA-1&quot;, &quot;2cell-RNA-2&quot;), &quot;treat&quot; = c(&quot;1cell-m6A-1&quot;, &quot;1cell-m6A-2&quot;, &quot;2cell-m6A-1&quot;, &quot;2cell-m6A-2&quot;)), sample_group_info2 = list(&quot;cellState1&quot; = c(&quot;1cell-RNA-1&quot;, &quot;1cell-RNA-2&quot;, &quot;1cell-m6A-1&quot;, &quot;1cell-m6A-2&quot;), &quot;cellState2&quot; = c(&quot;2cell-RNA-1&quot;, &quot;2cell-RNA-2&quot;, &quot;2cell-m6A-1&quot;, &quot;2cell-m6A-2&quot;)), by_layer_y = T, row_strip_setting_list = list(fill = c(&quot;purple&quot;,&quot;yellow&quot;,&quot;pink&quot;)), panel.spacing = c(0.2,0.2)) More details you can check ggh4x::strip_themed function. 5.9 Draw chromosome annotation Here you can add corresponding genome ideogram data to show chromosome structure for gene. First you should load ideogram data. The are some prepared genome like mm10, hg39, hg19 can be loaded to use directly. For other genome versions, you can use BioSeqUtils::catchIdeoData function to download it. The catchIdeoData returns a list object: data(&quot;mm10_obj&quot;) str(mm10_obj) # List of 3 # $ plot_df :&#39;data.frame&#39;: 403 obs. of 6 variables: # ..$ chr : chr [1:403] &quot;chr1&quot; &quot;chr1&quot; &quot;chr1&quot; &quot;chr1&quot; ... # ..$ chromStart : num [1:403] 0 8840440 12278390 20136559 22101102 ... # ..$ chromEnd : num [1:403] 8840440 12278390 20136559 22101102 30941543 ... # ..$ name : chr [1:403] &quot;qA1&quot; &quot;qA2&quot; &quot;qA3&quot; &quot;qA4&quot; ... # ..$ gieStain : chr [1:403] &quot;gpos100&quot; &quot;gneg&quot; &quot;gpos33&quot; &quot;gneg&quot; ... # ..$ gieStainCol: chr [1:403] &quot;black&quot; &quot;white&quot; &quot;gray67&quot; &quot;white&quot; ... # $ border_df : tibble [21 × 3] (S3: tbl_df/tbl/data.frame) # ..$ chr : chr [1:21] &quot;chr1&quot; &quot;chr10&quot; &quot;chr11&quot; &quot;chr12&quot; ... # ..$ xmin: num [1:21] 0 0 0 0 0 0 0 0 0 0 ... # ..$ xmax: num [1:21] 1.95e+08 1.31e+08 1.22e+08 1.20e+08 1.20e+08 ... # $ acen_plot_df: NULL draw_chromosome should be setted to TRUE if you want to add chromosome facet annotation. draw_chromosome_params accepts a named list to control how the chromosome structure is drawn. More details please refer to BioSeqUtils::drawChromosome function. Now we add chromosome facet track for corresponding genes: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = mm10_obj)) remove_chrom_panel_border can be used to remove chromosome track panel borders: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = mm10_obj), remove_chrom_panel_border = T) You can also use remove_all_panel_border to remove all track panel borders with more concise presentation: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = mm10_obj), remove_all_panel_border = T) panel_size_setting allows you to set width and height for each panel. Here we reduce the chromosome panel height: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = mm10_obj), remove_chrom_panel_border = T, panel_size_setting = list(rows = rep(c(4,4,4,4,4,4,4,4,4,2),4), cols = rep(12,4))) Let’s add some group informations: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;,&quot;Mtdh&quot;,&quot;Adamts3&quot;), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = mm10_obj), remove_chrom_panel_border = T, panel_size_setting = list(rows = rep(c(4,4,4,4,4,4,4,4,4,2),4), cols = rep(12,4)), gene_group_info = list(cluster1 = c(&quot;Actb&quot;,&quot;Myc&quot;), cluster2 = c(&quot;Mtdh&quot;,&quot;Adamts3&quot;), cluster3 = c(&quot;Zfp68&quot;,&quot;Pabpc1&quot;)), sample_group_info = list(&quot;input&quot; = c(&quot;1cell-RNA-1&quot;, &quot;1cell-RNA-2&quot;, &quot;2cell-RNA-1&quot;, &quot;2cell-RNA-2&quot;), &quot;treat&quot; = c(&quot;1cell-m6A-1&quot;, &quot;1cell-m6A-2&quot;, &quot;2cell-m6A-1&quot;, &quot;2cell-m6A-2&quot;)), panel.spacing = c(0.2,0.2)) 5.10 Plot with specified genomic region Maybe sometimes we need to show the track information with given a specified genomic region instead of genes. You can give a named list for query_region to draw different genomic region tracks. Multiple genomic positions also can be accepted. Examples show here: trackVisProMax(Input_gtf = gtf, Input_bw = bw, query_region = list(query_chr = c(&quot;5&quot;,&quot;15&quot;), query_start = c(65438603,9263295), query_end = c(65834288,9785835))) Modifing the transcript arrow styles and show all trancripts: trackVisProMax(Input_gtf = gtf, Input_bw = bw, query_region = list(query_chr = c(&quot;5&quot;,&quot;15&quot;), query_start = c(65438603,9263295), query_end = c(65834288,9785835)), trans_topN = &quot;all&quot;, fixed_column_range = F, trans_exon_arrow_params = list(arrow = arrow(length = unit(0.3,&quot;mm&quot;)), linewidth = 0.2)) The details for trans track: Adding gene labels: trackVisProMax(Input_gtf = gtf, Input_bw = bw, query_region = list(query_chr = c(&quot;5&quot;,&quot;15&quot;), query_start = c(65438603,9263295), query_end = c(65834288,9785835)), trans_topN = &quot;all&quot;, fixed_column_range = F, trans_exon_arrow_params = list(arrow = arrow(length = unit(0.3,&quot;mm&quot;)), linewidth = 0.2), add_gene_label_layer = T, gene_label_params = list(size = 1,segment.size = 0.1)) Collapsing transcripts: trackVisProMax(Input_gtf = gtf, Input_bw = bw, query_region = list(query_chr = c(&quot;5&quot;,&quot;15&quot;), query_start = c(65438603,9263295), query_end = c(65834288,9785835)), collapse_trans = T, fixed_column_range = F, trans_exon_arrow_params = list(arrow = arrow(length = unit(0.3,&quot;mm&quot;)), linewidth = 0.2), add_gene_label_layer = T, gene_label_params = list(size = 1,segment.size = 0.1), gene_label_shift_y = -0.5) Adding chromosome structure: trackVisProMax(Input_gtf = gtf, Input_bw = bw, query_region = list(query_chr = c(&quot;5&quot;,&quot;15&quot;), query_start = c(65438603,9263295), query_end = c(65834288,9785835)), trans_topN = &quot;all&quot;, fixed_column_range = F, trans_exon_arrow_params = list(arrow = arrow(length = unit(0.3,&quot;mm&quot;)), linewidth = 0.2), add_gene_label_layer = T, gene_label_params = list(size = 1,segment.size = 0.1), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = mm10_obj)) 5.11 Adding peaks track I don’t draw the peaks file to assign each new panel. I have put them all into one panel which is enough. This is similar with the trans panel. Input_bed accepts peaks data which output from loadBed function. We first load the peaks data: bedfile &lt;- list.files(path = &quot;./&quot;,pattern = &quot;.bed&quot;) # [1] &quot;peaks.bed&quot; &quot;peaks2.bed&quot; bed_df &lt;- loadBed(bedfile) # check head(bed_df,3) # seqnames start end sampleName y # 1 5 142905501 142905600 peaks 1 # 2 5 142903201 142903800 peaks 1 # 3 15 61985342 61985900 peaks 1 Plotting the peaks track: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_bed = bed_df, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;)) peak_width controls the peaks rectangle height: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_bed = bed_df, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;), peak_width = 0.9) peak_fill_col controls the peaks rectangle colors: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_bed = bed_df, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;), peak_width = 0.9, peak_fill_col = c(peaks = &quot;orange&quot;,peaks2 = &quot;purple&quot;)) Adding chromosomes: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_bed = bed_df, Input_gene = c(&quot;Actb&quot;,&quot;Myc&quot;), peak_width = 0.9, peak_fill_col = c(peaks = &quot;orange&quot;,peaks2 = &quot;purple&quot;), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = mm10_obj)) "],["loops-visualization.html", "Chapter 6 Loops visualization 6.1 Input data prepration 6.2 Basic loops visualization 6.3 Reverse Y axis 6.4 Combing with chromosome track 6.5 Higlight regions 6.6 Drawing only loop tracks", " Chapter 6 Loops visualization For Hi-C, HiChIP and ChIA-PET sequencing technologies, them aim to catch the three dimension interaction of chromosomes. Finding interaction sites and visualize them which are on demand. Usually we use arch links to represent the interaction information. 6.1 Input data prepration Test data can be fetched on GSE200165. We can use loadloops function to load the interaction sites data: loop_file &lt;- list.files(&quot;test-bw2/&quot;,pattern = &quot;.bedpe$&quot;,full.names = T) loop_file # [1] &quot;test-bw2/C1-CTCF.bedpe&quot; &quot;test-bw2/C1-H3K27ac.bedpe&quot; &quot;test-bw2/M1-CTCF.bedpe&quot; # [4] &quot;test-bw2/M1-H3K27ac.bedpe&quot; file_name = c(&quot;C1-CTCF&quot;,&quot;C1-H3K27ac&quot;,&quot;M1-CTCF&quot;,&quot;M1-H3K27ac&quot;) # test code loop_data &lt;- loadloops(loop_file = loop_file,file_name = file_name, sep = &quot; &quot;) # check head(loop_data,3) # seqnames start end score fileName # 1 chr10 100002774 100022436 0.021354 C1-CTCF # 2 chr10 100002774 100069170 0.068404 C1-CTCF # 3 chr10 100002774 100185646 0.184670 C1-CTCF Test data can be fetched on GSE200160. Here we also load bigwig data: # bigwig file &lt;- list.files(path = &quot;test-bw2/&quot;,pattern = &#39;.bw&#39;,full.names = T) # [1] &quot;test-bw2/ChIP-CTCF-MYC1.bw&quot; &quot;test-bw2/ChIP-H3K27ac-MYC1.bw&quot; &quot;test-bw2/ChIP-Input-MYC1.bw&quot; # [4] &quot;test-bw2/ChIP-MYC-MYC1.bw&quot; bw &lt;- loadBigWig(bw_file = file,chrom = &quot;8&quot;) bw$seqnames &lt;- paste(&quot;chr&quot;,bw$seqnames,sep = &quot;&quot;) # gtf gtf &lt;- rtracklayer::import.gff(&quot;test-bw2/hg19.ncbiRefSeq.gtf.gz&quot;,format = &quot;gtf&quot;) %&gt;% data.frame() 6.2 Basic loops visualization The legend score means the distance across two interaction sites. The higher score, the longer distance: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = &quot;chr8&quot;, query_start = 100010290, query_end = 101157229), Input_loop = loop_data, fixed_column_range = F) loops_col controls the color or links: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = &quot;chr8&quot;, query_start = 100010290, query_end = 101157229), Input_loop = loop_data, fixed_column_range = F, loops_col = c(&quot;white&quot;,&quot;blue&quot;)) signal_layer_loop_params accepts a named list to control the links layer, For more details, please check ggbio::geom_arch. Here we turn off the legend: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = &quot;chr8&quot;, query_start = 100010290, query_end = 101157229), Input_loop = loop_data, fixed_column_range = F, loops_col = c(&quot;white&quot;,&quot;blue&quot;), signal_layer_loop_params = list(show.legend = F)) max.height can make the links panel height to be same: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = &quot;chr8&quot;, query_start = 100010290, query_end = 101157229), Input_loop = loop_data, fixed_column_range = F, signal_layer_loop_params = list(max.height = 12)) linewidth changes the links linewidth: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = &quot;chr8&quot;, query_start = 100010290, query_end = 101157229), Input_loop = loop_data, fixed_column_range = F, signal_layer_loop_params = list(linewidth = 1)) We can arrange the sample order: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = &quot;chr8&quot;, query_start = 100010290, query_end = 101157229), Input_loop = loop_data, fixed_column_range = F, sample_order = c(&quot;M1-CTCF&quot;,&quot;ChIP-CTCF-MYC1&quot;, &quot;C1-CTCF&quot;,&quot;ChIP-MYC-MYC1&quot;, &quot;M1-H3K27ac&quot;,&quot;ChIP-H3K27ac-MYC1&quot;, &quot;C1-H3K27ac&quot;,&quot;ChIP-Input-MYC1&quot;)) 6.3 Reverse Y axis reverse_y_vars allows you to reverse the Y axis for any signal track, you only need to give a track character name: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = &quot;chr8&quot;, query_start = 100010290, query_end = 101157229), Input_loop = loop_data, fixed_column_range = F, sample_order = c(&quot;ChIP-CTCF-MYC1&quot;,&quot;M1-CTCF&quot;, &quot;ChIP-MYC-MYC1&quot;,&quot;C1-CTCF&quot;, &quot;ChIP-H3K27ac-MYC1&quot;,&quot;M1-H3K27ac&quot;, &quot;ChIP-Input-MYC1&quot;,&quot;C1-H3K27ac&quot;), reverse_y_vars = c(&quot;M1-CTCF&quot;,&quot;C1-CTCF&quot;, &quot;M1-H3K27ac&quot;,&quot;C1-H3K27ac&quot;)) Or you can reverse the bigwig track Y axis: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = &quot;chr8&quot;, query_start = 100010290, query_end = 101157229), Input_loop = loop_data, fixed_column_range = F, sample_order = c(&quot;M1-CTCF&quot;,&quot;ChIP-CTCF-MYC1&quot;, &quot;C1-CTCF&quot;,&quot;ChIP-MYC-MYC1&quot;, &quot;M1-H3K27ac&quot;,&quot;ChIP-H3K27ac-MYC1&quot;, &quot;C1-H3K27ac&quot;,&quot;ChIP-Input-MYC1&quot;), reverse_y_vars = c(&quot;ChIP-CTCF-MYC1&quot;,&quot;ChIP-MYC-MYC1&quot;, &quot;ChIP-H3K27ac-MYC1&quot;,&quot;ChIP-Input-MYC1&quot;)) Let’s draw multiple genomic regions: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = c(&quot;chr8&quot;,&quot;chr8&quot;), query_start = c(100010290,65831189), query_end = c(101157229,67351272)), Input_loop = loop_data, fixed_column_range = F, sample_order = c(&quot;ChIP-CTCF-MYC1&quot;,&quot;M1-CTCF&quot;, &quot;ChIP-MYC-MYC1&quot;,&quot;C1-CTCF&quot;, &quot;ChIP-H3K27ac-MYC1&quot;,&quot;M1-H3K27ac&quot;, &quot;ChIP-Input-MYC1&quot;,&quot;C1-H3K27ac&quot;), reverse_y_vars = c(&quot;M1-CTCF&quot;,&quot;C1-CTCF&quot;, &quot;M1-H3K27ac&quot;,&quot;C1-H3K27ac&quot;)) 6.4 Combing with chromosome track Adding chromosome tracks: data(&quot;hg19_obj&quot;) trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = c(&quot;chr8&quot;,&quot;chr8&quot;), query_start = c(100010290,65831189), query_end = c(101157229,67351272)), Input_loop = loop_data, fixed_column_range = F, sample_order = c(&quot;ChIP-CTCF-MYC1&quot;,&quot;M1-CTCF&quot;, &quot;ChIP-MYC-MYC1&quot;,&quot;C1-CTCF&quot;, &quot;ChIP-H3K27ac-MYC1&quot;,&quot;M1-H3K27ac&quot;, &quot;ChIP-Input-MYC1&quot;,&quot;C1-H3K27ac&quot;), reverse_y_vars = c(&quot;M1-CTCF&quot;,&quot;C1-CTCF&quot;, &quot;M1-H3K27ac&quot;,&quot;C1-H3K27ac&quot;), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj)) Adding group information: trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = c(&quot;chr8&quot;,&quot;chr8&quot;), query_start = c(100010290,65831189), query_end = c(101157229,67351272)), Input_loop = loop_data, fixed_column_range = F, sample_order = c(&quot;ChIP-CTCF-MYC1&quot;,&quot;M1-CTCF&quot;, &quot;ChIP-MYC-MYC1&quot;,&quot;C1-CTCF&quot;, &quot;ChIP-H3K27ac-MYC1&quot;,&quot;M1-H3K27ac&quot;, &quot;ChIP-Input-MYC1&quot;,&quot;C1-H3K27ac&quot;), reverse_y_vars = c(&quot;M1-CTCF&quot;,&quot;C1-CTCF&quot;, &quot;M1-H3K27ac&quot;,&quot;C1-H3K27ac&quot;), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj), sample_group_info = list(state1 = c(&quot;ChIP-CTCF-MYC1&quot;,&quot;M1-CTCF&quot;), state2 = c(&quot;ChIP-MYC-MYC1&quot;,&quot;C1-CTCF&quot;), histoneMarker = c(&quot;ChIP-H3K27ac-MYC1&quot;,&quot;M1-H3K27ac&quot;), inputControl = c(&quot;ChIP-Input-MYC1&quot;,&quot;C1-H3K27ac&quot;)), panel.spacing = c(0.2,0.2)) 6.5 Higlight regions Adding highlight regions: higlight_region &lt;- list(&quot;chr8:100010290-101157229&quot; = list(start = c(100310290), end = c(100457229)), &quot;chr8:65831189-67351272&quot; = list(start = c(65931189,66231189), end = c(66051272,66351272))) higlight_col &lt;- list(Actb = c(&quot;purple&quot;), Myc = c(&quot;yellow&quot;,&quot;green&quot;)) trackVisProMax(Input_bw = bw, Input_gtf = gtf, query_region = list(query_chr = c(&quot;chr8&quot;,&quot;chr8&quot;), query_start = c(100010290,65831189), query_end = c(101157229,67351272)), Input_loop = loop_data, fixed_column_range = F, sample_order = c(&quot;ChIP-CTCF-MYC1&quot;,&quot;M1-CTCF&quot;, &quot;ChIP-MYC-MYC1&quot;,&quot;C1-CTCF&quot;, &quot;ChIP-H3K27ac-MYC1&quot;,&quot;M1-H3K27ac&quot;, &quot;ChIP-Input-MYC1&quot;,&quot;C1-H3K27ac&quot;), reverse_y_vars = c(&quot;M1-CTCF&quot;,&quot;C1-CTCF&quot;, &quot;M1-H3K27ac&quot;,&quot;C1-H3K27ac&quot;), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj), sample_group_info = list(state1 = c(&quot;ChIP-CTCF-MYC1&quot;,&quot;M1-CTCF&quot;), state2 = c(&quot;ChIP-MYC-MYC1&quot;,&quot;C1-CTCF&quot;), histoneMarker = c(&quot;ChIP-H3K27ac-MYC1&quot;,&quot;M1-H3K27ac&quot;), inputControl = c(&quot;ChIP-Input-MYC1&quot;,&quot;C1-H3K27ac&quot;)), panel.spacing = c(0.2,0.2), higlight_region = higlight_region, higlight_col = higlight_col) 6.6 Drawing only loop tracks We can only plot loops graph without bigwig track: trackVisProMax(Input_gtf = gtf, query_region = list(query_chr = c(&quot;chr8&quot;,&quot;chr8&quot;), query_start = c(100010290,65831189), query_end = c(101157229,67351272)), Input_loop = loop_data, fixed_column_range = F, draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj), sample_group_info = list(state1 = c(&quot;C1-CTCF&quot;,&quot;M1-CTCF&quot;), state2 = c(&quot;M1-H3K27ac&quot;,&quot;C1-H3K27ac&quot;)), panel.spacing = c(0.2,0.2)) "],["hic-heatmap-visualization.html", "Chapter 7 Hic heatmap visualization 7.1 Data preperation 7.2 Basic plot 7.3 Real data practice", " Chapter 7 Hic heatmap visualization The related Hic data for input we have discussed before. prepareHic function will be used in the data preparation step. Here we use the test data in plotgardenerData package as examples. Package plotgardener will outputs the following results: Let’s use trackVisProMax to finish it. 7.1 Data preperation Load Hic data: library(plotgardenerData) library(plotgardener) data(&quot;GM12878_HiC_10kb&quot;) data(&quot;IMR90_HiC_10kb&quot;) data(&quot;GM12878_ChIP_CTCF_signal&quot;) data(&quot;IMR90_ChIP_CTCF_signal&quot;) data(&quot;GM12878_ChIP_H3K27ac_signal&quot;) data(&quot;IMR90_ChIP_H3K27ac_signal&quot;) # prepare hic data data = list(GM12878_HiC_10kb,IMR90_HiC_10kb) file_name = c(&quot;GM12878_HiC&quot;,&quot;IMR90_HiC&quot;) chrom = c(&quot;21&quot;,&quot;21&quot;) resolution = c(10000,10000) input_hic &lt;- prepareHic(data = list(GM12878_HiC_10kb,IMR90_HiC_10kb), file_name = c(&quot;GM12878_HiC&quot;,&quot;IMR90_HiC&quot;), chrom = c(&quot;21&quot;,&quot;21&quot;), resolution = c(10000,10000)) Load bigwig data: # prepare data hic_bw &lt;- rbind(GM12878_ChIP_CTCF_signal,IMR90_ChIP_CTCF_signal, GM12878_ChIP_H3K27ac_signal,IMR90_ChIP_H3K27ac_signal) hic_bw$fileName &lt;- rep(c(&quot;CTCF_signal&quot;,&quot;IMR90_CTCF_signal&quot;, &quot;H3K27ac_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;), c(nrow(GM12878_ChIP_CTCF_signal),nrow(IMR90_ChIP_CTCF_signal), nrow(GM12878_ChIP_H3K27ac_signal),nrow(IMR90_ChIP_H3K27ac_signal))) colnames(hic_bw)[1] &lt;- &quot;seqnames&quot; # gtf gtf &lt;- rtracklayer::import.gff(&quot;test-bw2/hg19.ncbiRefSeq.gtf.gz&quot;,format = &quot;gtf&quot;) %&gt;% data.frame() 7.2 Basic plot Let’s see the bigwig track data first: # plot trackVisProMax(Input_bw = hic_bw %&gt;% filter(fileName %in% c(&quot;CTCF_signal&quot;,&quot;H3K27ac_signal&quot;)), Input_gtf = gtf, query_region = list(query_chr = &quot;chr21&quot;, query_start = 27995000, query_end = 30305000), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj)) Adding heatmap track: # plot trackVisProMax(Input_bw = hic_bw %&gt;% filter(fileName %in% c(&quot;CTCF_signal&quot;,&quot;H3K27ac_signal&quot;)), Input_gtf = gtf, query_region = list(query_chr = &quot;chr21&quot;, query_start = 27995000, query_end = 30305000), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj)) Let’s zoom the heatmap and see details: Removing the legend: # plot trackVisProMax(Input_bw = hic_bw %&gt;% filter(fileName %in% c(&quot;CTCF_signal&quot;,&quot;H3K27ac_signal&quot;)), Input_hic = input_hic %&gt;% filter(fileName == &quot;GM12878_HiC&quot;), Input_gtf = gtf, query_region = list(query_chr = &quot;chr21&quot;, query_start = 27995000, query_end = 30305000), fixed_column_range = F, draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj), sample_order = c(&quot;GM12878_HiC&quot;,&quot;CTCF_signal&quot;,&quot;H3K27ac_signal&quot;), signal_range = list(&quot;chr21:27995000-30305000&quot; = c(CTCF_signal = 117,H3K27ac_signal = 117)), signal_layer_heatmap_params = list(show.legend = F)) Seeing another example track on the right: # add contact heatmap trackVisProMax(Input_bw = hic_bw %&gt;% filter(fileName %in% c(&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;)), Input_gtf = gtf, Input_hic = input_hic %&gt;% filter(fileName == &quot;IMR90_HiC&quot;), query_region = list(query_chr = &quot;chr21&quot;, query_start = 27995000, query_end = 30305000), fixed_column_range = F, draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj), sample_order = c(&quot;IMR90_HiC&quot;,&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;), signal_range = list(&quot;chr21:27995000-30305000&quot; = c(IMR90_CTCF_signal = 77,IMR90_H3K27ac_signal = 77))) heatmap_fill_col controls the heatmap colors, here we use same colors corresponding to the example: trackVisProMax(Input_bw = hic_bw %&gt;% filter(fileName %in% c(&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;)), Input_gtf = gtf, Input_hic = input_hic %&gt;% filter(fileName == &quot;IMR90_HiC&quot;), query_region = list(query_chr = &quot;chr21&quot;, query_start = 27995000, query_end = 30305000), fixed_column_range = F, draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj), sample_order = c(&quot;IMR90_HiC&quot;,&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;), signal_range = list(&quot;chr21:27995000-30305000&quot; = c(IMR90_CTCF_signal = 77,IMR90_H3K27ac_signal = 77)), heatmap_fill_col = RColorBrewer::brewer.pal(n = 9, &quot;YlGnBu&quot;)) Reverting the heatmap: trackVisProMax(Input_bw = hic_bw %&gt;% filter(fileName %in% c(&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;)), Input_gtf = gtf, Input_hic = input_hic %&gt;% filter(fileName == &quot;IMR90_HiC&quot;), query_region = list(query_chr = &quot;chr21&quot;, query_start = 27995000, query_end = 30305000), fixed_column_range = F, draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj), sample_order = c(&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_HiC&quot;,&quot;IMR90_H3K27ac_signal&quot;), signal_range = list(&quot;chr21:27995000-30305000&quot; = c(IMR90_CTCF_signal = 77,IMR90_H3K27ac_signal = 77)), reverse_y_vars = c(&quot;IMR90_HiC&quot;), heatmap_fill_col = RColorBrewer::brewer.pal(n = 9, &quot;RdYlBu&quot;)) You will see some uncomplete graphic elements beside the heatmap when you change into other genomic regions: trackVisProMax(Input_bw = hic_bw %&gt;% filter(fileName %in% c(&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;)), Input_gtf = gtf, Input_hic = input_hic %&gt;% filter(fileName == &quot;IMR90_HiC&quot;), query_region = list(query_chr = &quot;chr21&quot;, query_start = 29500000, query_end = 30000000), fixed_column_range = F, draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj), sample_order = c(&quot;IMR90_HiC&quot;,&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;), signal_range = list(&quot;chr21:27995000-30305000&quot; = c(IMR90_HiC = 400000,IMR90_CTCF_signal = 77, IMR90_H3K27ac_signal = 77)), heatmap_fill_col = RColorBrewer::brewer.pal(n = 9, &quot;YlGnBu&quot;)) Details beside the heatmap. This is because some polygon positions were filtered which are outside the specified genomic regions: You can use xlimit_range parameter to zoom a region: trackVisProMax(Input_bw = hic_bw %&gt;% filter(fileName %in% c(&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;)), Input_gtf = gtf, Input_hic = input_hic %&gt;% filter(fileName == &quot;IMR90_HiC&quot;), query_region = list(query_chr = &quot;chr21&quot;, query_start = 27995000, query_end = 30305000), fixed_column_range = F, draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj), sample_order = c(&quot;IMR90_HiC&quot;,&quot;IMR90_CTCF_signal&quot;,&quot;IMR90_H3K27ac_signal&quot;), signal_range = list(&quot;chr21:27995000-30305000&quot; = c(IMR90_CTCF_signal = 77, IMR90_H3K27ac_signal = 77)), heatmap_fill_col = RColorBrewer::brewer.pal(n = 9, &quot;YlGnBu&quot;), xlimit_range = c(29500000,30000000)) 7.3 Real data practice Note: Using chromstart and chromend to extarct data from a specified genomic region and setting a suitable resolution. Here we do a practice with a public Hic data. Test data can be fetched on GSE200160. First extract heatmap data from .hic data from a specified genomic region: # real data hic_data &lt;- list.files(&quot;test-bw2/&quot;,pattern = &quot;.hic&quot;,full.names = T) hic_data # [1] &quot;test-bw2/RPE-doxorubicin_02uM.hic&quot; &quot;test-bw2/RPE-doxorubicin_034uM.hic&quot; # [3] &quot;test-bw2/RPE-ICRF193_5uM.hic&quot; hic_df &lt;- prepareHic(hic_path = hic_data, file_name = c(&quot;doxorubicin_02uM&quot;,&quot;doxorubicin_34uM&quot;, &quot;ICRF193_5uM&quot;), chrom = &quot;1&quot;,assembly = &quot;hg19&quot;, chromstart = 29400000,chromend = 29500000, resolution = 10000) Now plot this region: # plot trackVisProMax(Input_gtf = gtf, Input_hic = hic_df, query_region = list(query_chr = &quot;chr1&quot;, query_start = min(hic_df$start), query_end = max(hic_df$start)), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj)) Add border colors and change heatmap fill colors: # plot trackVisProMax(Input_gtf = gtf, Input_hic = hic_df, query_region = list(query_chr = &quot;chr1&quot;, query_start = min(hic_df$start), query_end = max(hic_df$start)), draw_chromosome = T, draw_chromosome_params = list(ideogram_obj = hg19_obj)) "],["splice-junction-visualization.html", "Chapter 8 Splice junction visualization 8.1 Data pareparation 8.2 Visualization 8.3 ", " Chapter 8 Splice junction visualization There have been some visualization tools for RNA different types of splice and junction events. The most popular tool is called sashimiplot with embeded into multiple splice-analysis tools. It is still not convenient to visualize the splice data with your own bigwig format data with significant differential splice sites information which produced from other softwares. The trackVisProMax also allows you plot the RNA splice and junctions data with your own data. 8.1 Data pareparation Here we use RNA-seq as example data, first we extract all junctions from bam files: bam_file &lt;- list.files(path = &quot;F:/junc-test/&quot;, pattern = &quot;.bam$&quot;,full.names = T) bam_file # [1] &quot;F:/junc-test/C1.sorted.bam&quot; &quot;F:/junc-test/WT.sorted.bam&quot; junc_df &lt;- loadJunction(data_path = bam_file, file_name = c(&quot;C1&quot;,&quot;WT&quot;)) junc_df &lt;- junc_df %&gt;% dplyr::filter(score &gt;= 5) # check head(junc_df,3) # seqnames start end score fileName # 1 1 3154117 3159706 1 C1 # 2 1 3207318 3213608 1 C1 # 3 1 4492669 4493099 8 C1 Load bigwig files: # gtf gtf &lt;- rtracklayer::import.gff(&quot;Mus_musculus.GRCm38.102.gtf&quot;,format = &quot;gtf&quot;) %&gt;% data.frame() # load bigwig files bw_file &lt;- list.files(path = &quot;F:/junc-test/&quot;,pattern = &#39;.bw&#39;,full.names = T) bw_file # [1] &quot;F:/junc-test/C1.BPM.bw&quot; &quot;F:/junc-test/WT.BPM.bw&quot; # select some chromosomes for test bw &lt;- loadBigWig(bw_file = bw_file,file_name = c(&quot;C1&quot;,&quot;WT&quot;)) bw2 &lt;- loadBigWig(bw_file = bw_file,file_name = c(&quot;C1_BW&quot;,&quot;WT_BW&quot;)) 8.2 Visualization Single gene test: trackVisProMax(Input_gtf = gtf, Input_bw = bw2, Input_junction = junc_df, fixed_column_range = F, Input_gene = c(&quot;Actb&quot;)) 8.3 Note: The junction curve will be drawn together with siganal track if your junction fileName’s are same as bigwig files and junc_layer_combined should be setted to TRUE. trackVisProMax(Input_gtf = gtf, Input_bw = bw, junc_layer_combined = T, Input_junction = junc_df, Input_gene = c(&quot;Pou5f1&quot;,&quot;Gnpda2&quot;)) signal_layer_junction_params and signal_layer_junction_label_params control the curve graphics and text label graphics. Here we change the linewidth and label size: trackVisProMax(Input_gtf = gtf, Input_bw = bw, junc_layer_combined = T, Input_junction = junc_df, Input_gene = c(&quot;Pou5f1&quot;,&quot;Gnpda2&quot;), signal_layer_junction_params = list(linewidth = 1), signal_layer_junction_label_params = list(size = 2)) Drawing the junctions track separately and we can turn the curve style into band-curve style with add_band_line=TRUE. The width of line is relatted with the junction counts which means using the score column: trackVisProMax(Input_gtf = gtf, Input_bw = bw2, Input_junction = junc_df, fixed_column_range = F, add_band_line = T, signal_range_pos = c(0.1,0.9), Input_gene = c(&quot;Pou5f1&quot;,&quot;Gnpda2&quot;), sample_order = c(&quot;C1_BW&quot;,&quot;C1&quot;,&quot;WT_BW&quot;,&quot;WT&quot;)) Reversing the junction tracks. band_width controls the curve witdth: trackVisProMax(Input_gtf = gtf, Input_bw = bw2, Input_junction = junc_df, fixed_column_range = F, add_band_line = T, signal_range_pos = c(0.1,0.9), Input_gene = c(&quot;Pou5f1&quot;,&quot;Gnpda2&quot;), sample_order = c(&quot;C1_BW&quot;,&quot;C1&quot;,&quot;WT_BW&quot;,&quot;WT&quot;), band_width = 1, reverse_y_vars = c(&quot;C1&quot;,&quot;WT&quot;)) Combining the signal tracks and junction tracks: trackVisProMax(Input_gtf = gtf, Input_bw = bw, junc_layer_combined = T, Input_junction = junc_df, signal_range_pos = c(0.1,0.9), add_band_line = T, Input_gene = c(&quot;Pou5f1&quot;,&quot;Gnpda2&quot;)) "],["other-funs.html", "Chapter 9 Other funs 9.1 Transcript coordinate transformation 9.2 Track overlap", " Chapter 9 Other funs 9.1 Transcript coordinate transformation Mostly we draw transcript structures on genomic coordinates which contain intron sequence. Sometimes you just want to compare multiple transcripts for a gene with removing introns. transCoordTransform allows you to transform the genomic coordinate into absolute coordinate from gtf file. Here are the examples: library(patchwork) # gtf raw_gtf &lt;- rtracklayer::import.gff(&quot;test-bw2/hg19.ncbiRefSeq.gtf.gz&quot;,format = &quot;gtf&quot;) %&gt;% data.frame() p1 &lt;- trackVisProMax(Input_gtf = raw_gtf, Input_gene = c(&quot;MYC&quot;,&quot;NANOG&quot;)) p1 Transforming coordinate: tgene &lt;- raw_gtf %&gt;% filter(gene_name %in% c(&quot;MYC&quot;,&quot;NANOG&quot;)) trans_gtf &lt;- transCoordTransform(gtf_file = tgene) # check head(trans_gtf[1:3,1:8]) # seqnames start end width strand source type score # 1 chr12 1 2049 6660 + ncbiRefSeq.2021-05-17 transcript NA # 2 chr12 1 364 364 + ncbiRefSeq.2021-05-17 exon NA # 3 chr12 365 627 263 + ncbiRefSeq.2021-05-17 exon NA p2 &lt;- trackVisProMax(Input_gtf = trans_gtf, Input_gene = c(&quot;MYC&quot;,&quot;NANOG&quot;)) p2 p1/p2 p3 &lt;- trackVisProMax(Input_gtf = trans_gtf, Input_gene = c(&quot;MYC&quot;,&quot;NANOG&quot;), trans_exon_col_params = list(mapping = aes(fill = type))) p1/p2/p3 9.2 Track overlap For some experiments, you got IP(immunoprecipitation) and Input group, maybe you need to put them together to compare difference of signals. One way we can assign a new fileName column and set fill colors with your experiment groups. Examples showed here: First we assign new columns for bigwig data: library(BioSeqUtils) library(ggplot2) # load bigwig files file &lt;- list.files(path = &quot;test-bw/&quot;,pattern = &#39;.bw&#39;,full.names = T) file # [1] &quot;test-bw/1cell-m6A-1.bw&quot; &quot;test-bw/1cell-m6A-2.bw&quot; &quot;test-bw/1cell-RNA-1.bw&quot; # [4] &quot;test-bw/1cell-RNA-2.bw&quot; &quot;test-bw/2cell-m6A-1.bw&quot; &quot;test-bw/2cell-m6A-2.bw&quot; # [7] &quot;test-bw/2cell-RNA-1.bw&quot; &quot;test-bw/2cell-RNA-2.bw&quot; # select some chromosomes for test bw &lt;- loadBigWig(file,chrom = c(&quot;5&quot;,&quot;15&quot;)) # check head(bw,3) # seqnames start end score fileName # 1 15 1 3054635 0.00000 1cell-m6A-1 # 2 15 3054636 3054640 1.34079 1cell-m6A-1 # 3 15 3054641 3054715 2.68159 1cell-m6A-1 bw_new &lt;- bw bw_new$new_name &lt;- paste(sapply(strsplit(bw_new$fileName,split = &quot;-&quot;),&quot;[&quot;,1), sapply(strsplit(bw_new$fileName,split = &quot;-&quot;),&quot;[&quot;,3),sep = &quot;-&quot;) bw_new$exptype &lt;- sapply(strsplit(bw_new$fileName,split = &quot;-&quot;),&quot;[&quot;,2) bw_new$fileName &lt;- bw_new$new_name # order bw$exptype &lt;- factor(bw$exptype,levels = c(&quot;m6A&quot;,&quot;RNA&quot;)) # check head(bw_new) # seqnames start end score fileName new_name exptype # 1 15 1 3054635 0.00000 1cell-1 1cell-1 m6A # 2 15 3054636 3054640 1.34079 1cell-1 1cell-1 m6A # 3 15 3054641 3054715 2.68159 1cell-1 1cell-1 m6A # 4 15 3054716 3054720 1.34079 1cell-1 1cell-1 m6A # 5 15 3054721 3060760 0.00000 1cell-1 1cell-1 m6A # 6 15 3060761 3060765 1.34079 1cell-1 1cell-1 m6A # gtf gtf &lt;- rtracklayer::import.gff(&quot;Mus_musculus.GRCm38.102.gtf&quot;,format = &quot;gtf&quot;) %&gt;% data.frame() Plot for all samples: trackVisProMax(Input_gtf = gtf, Input_bw = bw, Input_gene = c(&quot;Utp3&quot;,&quot;Chpf2&quot;,&quot;Dmp1&quot;)) Plot for overlap tracks, we can see the difference of ip(m6A) and input(RNA) better: # plot trackVisProMax(Input_gtf = gtf, Input_bw = bw_new, Input_gene = c(&quot;Utp3&quot;,&quot;Chpf2&quot;,&quot;Dmp1&quot;), signal_layer_bw_params = list(mapping = aes(fill = exptype,color = exptype), show.legend = T)) "],["frequntlly-asked-questions.html", "Chapter 10 Frequntlly asked questions", " Chapter 10 Frequntlly asked questions 1_gene_name column not found Please make sure that your GTF file has gene_name column, if not, you can add a new column in it. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
